"use strict";
// Generated by LiteScript compiler v0.8.9, source: lib/mkPath.lite.md
// -----------
// Module Init
// -----------
//= ============
Object.defineProperty(exports, "__esModule", { value: true });
exports.dirExists = exports.create = exports.toFile = void 0;
// import fs, path
const fs = require("fs");
const path = require("path");
// ---------------------------
// mkPath.toFile
// ---------------------------
function toFile(filename) {
    // Create a path to a file
    create(path.dirname(filename));
}
exports.toFile = toFile;
// ---------------------------
// mkPath.create(dirPath)
// ---------------------------
function create(dirPath) {
    // Make sure a path exists - Recursive
    if (dirExists(dirPath)) {
        return;
    } // ok! dir exists
    // else... recursive:
    // try a folder up, until a dir is found (or an error thrown)
    create(path.dirname(dirPath)); // recurse
    // ok, found parent dir! - make the children dir
    fs.mkdirSync(dirPath);
    // return into recursion, creating children subdirs in reverse order (of recursion)
}
exports.create = create;
//    helper function dirExists(dirPath)
// ---------------------------
function dirExists(dirPath) {
    try {
        if (fs.statSync(dirPath).isDirectory()) {
            return true; // ok! exists and is a directory
        }
        else {
            throw new Error(`${dirPath} exists but IT IS NOT a directory`);
        }
    }
    catch (err) {
        // if dir does not exists, return false
        if (err.code === 'ENOENT') {
            return false;
        }
        throw err; // another error
    }
}
exports.dirExists = dirExists;
//# sourceMappingURL=mkPath.js.map
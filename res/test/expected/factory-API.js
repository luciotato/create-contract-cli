
// ----------------------------------------------
// generated by create-contract-cli from ./res/test/rust/staking-pool-factory/src/lib.rs
// ---------------------------------------------
            
import { spawnNearCli } from "./util/SpawnNearCli.js"
import { CommandLineArgs } from "./util/CommandLineArgs.js"
import { options } from "./CLIOptions.js"

//name of this script
export const nickname = 'factory'

//one function for each pub fn in the contract
//get parameters by consuming from CommandLineParser
export class ContractAPI {
        
  new_help =`
   Initializes the staking pool factory with the given account ID of the staking pool whitelist
   contract.
  #[init]
  
  usage:
  > factory new 
  `;
  
  new(a /*:CommandLineArgs*/) {
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("JSON params")
    
    //--new has no arguments, if you add some, uncomment the following line
    //const fnJSONparams = a.consumeJSON("{ x:0, y:1, z:3 }")
    
    a.noMoreArgs() // no more positional args should remain
    
    const nearCliArgs = [
      "call",
      options.contractName.value,
      "new",
    ]
    
    a.addOptionsTo(nearCliArgs); //add any other --options found the command line
    
    spawnNearCli(nearCliArgs);
    
  }
  
  get_min_attached_balance_help =`
   Returns the minimum amount of tokens required to attach to the function call to
   create a new staking pool.
  
  usage:
  > factory get_min_attached_balance 
  `;
  
  get_min_attached_balance(a /*:CommandLineArgs*/) {
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("JSON params")
    
    //--get_min_attached_balance has no arguments, if you add some, uncomment the following line
    //const fnJSONparams = a.consumeJSON("{ x:0, y:1, z:3 }")
    
    a.noMoreArgs() // no more positional args should remain
    
    const nearCliArgs = [
      "view",
      options.contractName.value,
      "get_min_attached_balance",
    ]
    
    a.addOptionsTo(nearCliArgs); //add any other --options found the command line
    
    spawnNearCli(nearCliArgs);
    
  }
  
  get_number_of_staking_pools_created_help =`
   Returns the total number of the staking pools created from this factory.
  
  usage:
  > factory get_number_of_staking_pools_created 
  `;
  
  get_number_of_staking_pools_created(a /*:CommandLineArgs*/) {
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("JSON params")
    
    //--get_number_of_staking_pools_created has no arguments, if you add some, uncomment the following line
    //const fnJSONparams = a.consumeJSON("{ x:0, y:1, z:3 }")
    
    a.noMoreArgs() // no more positional args should remain
    
    const nearCliArgs = [
      "view",
      options.contractName.value,
      "get_number_of_staking_pools_created",
    ]
    
    a.addOptionsTo(nearCliArgs); //add any other --options found the command line
    
    spawnNearCli(nearCliArgs);
    
  }
  
  create_staking_pool_help =`
   Creates a new staking pool.
   - 'staking_pool_id' - the prefix of the account ID that will be used to create a new staking
      pool account. It'll be prepended to the staking pool factory account ID separated by dot.
   - 'owner_id' - the account ID of the staking pool owner. This account will be able to
      control the staking pool, set reward fee, update staking key and vote on behalf of the
       pool.
   - 'stake_public_key' - the initial staking key for the staking pool.
   - 'reward_fee_fraction' - the initial reward fee fraction for the staking pool.
  #[payable]
  
  usage:
  > factory create_staking_pool { staking_pool_id: String, owner_id: AccountId, stake_public_key: Base58PublicKey, reward_fee_fraction: RewardFeeFraction }
  `;
  
  create_staking_pool(a /*:CommandLineArgs*/) {
    
    //function is #payable, --amount option is required
    a.requireOptionWithAmount(options.amount,'N'); //contract fn is payable, --amount expressed in N=NEARS is required
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("JSON params")
    
    //get fn arguments as JSON
    const fnJSONparams = a.consumeJSON("{ staking_pool_id: String, owner_id: AccountId, stake_public_key: Base58PublicKey, reward_fee_fraction: RewardFeeFraction }")
    
    a.noMoreArgs() // no more positional args should remain
    
    const nearCliArgs = [
      "call",
      options.contractName.value,
      "create_staking_pool",
      fnJSONparams,
    ]
    
    a.addOptionsTo(nearCliArgs); //add any other --options found the command line
    
    spawnNearCli(nearCliArgs);
    
  }
  
  on_staking_pool_create_help =`
   Callback after a staking pool was created.
   Returns the promise to whitelist the staking pool contract if the pool creation succeeded.
   Otherwise refunds the attached deposit and returns 'false'.
  
  usage:
  > factory on_staking_pool_create { staking_pool_account_id: AccountId, attached_deposit: U128, predecessor_account_id: AccountId }
  `;
  
  on_staking_pool_create(a /*:CommandLineArgs*/) {
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("JSON params")
    
    //get fn arguments as JSON
    const fnJSONparams = a.consumeJSON("{ staking_pool_account_id: AccountId, attached_deposit: U128, predecessor_account_id: AccountId }")
    
    a.noMoreArgs() // no more positional args should remain
    
    const nearCliArgs = [
      "call",
      options.contractName.value,
      "on_staking_pool_create",
      fnJSONparams,
    ]
    
    a.addOptionsTo(nearCliArgs); //add any other --options found the command line
    
    spawnNearCli(nearCliArgs);
    
  }
  
}

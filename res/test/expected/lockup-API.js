
    // ----------------------------------------------
    // generated by create-contract-cli from ./res/test/rust/lockup/src/lib.rs
    // ---------------------------------------------

    const color = require("./util/color.js");
    const nearCli = require("./util/SpawnNearCli.js");
    const options = require("./CLIOptions.js");
    const cliConfig = require("./CLIConfig.js");

    // name of this script
    const nickname = cliConfig.nickname;

    // one function for each pub fn in the contract
    // get parameters by consuming from CommandLineParser
    class ContractAPI {

        // this.view helper function
        view(command/*:string*/, fnJSONParams/*?:any*/) /*:string*/ {
            return nearCli.view(cliConfig.contractAccount, command, fnJSONParams, options)
        }
        // this.call helper function
        call(command/*:string*/, fnJSONParams/*?:any*/) /*:string*/ {
            return nearCli.call(cliConfig.contractAccount, command, fnJSONParams, options)
        }
    
    
  new_HELP(){ return `
   Requires 25 TGas (1 * BASE_GAS)
   Initializes lockup contract.
   - 'owner_account_id' - the account ID of the owner.  Only this account can call owner's
      methods on this contract.
   - 'lockup_duration' - the duration in nanoseconds of the lockup period from the moment
      the transfers are enabled.
   - 'lockup_timestamp' - the optional absolute lockup timestamp in nanoseconds which locks
      the tokens until this timestamp passes.
   - 'transfers_information' - the information about the transfers. Either transfers are
      already enabled, then it contains the timestamp when they were enabled. Or the transfers
      are currently disabled and it contains the account ID of the transfer poll contract.
   - 'vesting_schedule' - If provided, then it's either a base64 encoded hash of vesting
      schedule with salt or an explicit vesting schedule.
      Vesting schedule affects the amount of tokens the NEAR Foundation will get in case of
      employment termination as well as the amount of tokens available for transfer by
      the employee. If Hash provided, it's expected that vesting started before lockup and
      it only needs to be revealed in case of termination.
   - 'release_duration' - is the duration when the full lockup amount will be available.
      The tokens are linearly released from the moment transfers are enabled. If it's used
      in addition to the vesting schedule, then the amount of tokens available to transfer
      is subject to the minimum between vested tokens and released tokens.
   - 'staking_pool_whitelist_account_id' - the Account ID of the staking pool whitelist contract.
   - 'foundation_account_id' - the account ID of the NEAR Foundation, that has the ability to
      terminate vesting schedule.
  #[init]
  
  usage:
  > lockup new { owner_account_id: AccountId, lockup_duration: WrappedDuration, lockup_timestamp: Option, transfers_information: TransfersInformation, vesting_schedule: Option, release_duration: Option, staking_pool_whitelist_account_id: AccountId, foundation_account_id: Option }
  `};
  
  new(a /*:CommandLineArgs*/) /*:void*/{
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("{ account:userAccount, amount:xxN }")
    
    //get fn arguments as JSON
    const fnJSONParams = a.consumeJSON("{ owner_account_id: AccountId, lockup_duration: WrappedDuration, lockup_timestamp: Option, transfers_information: TransfersInformation, vesting_schedule: Option, release_duration: Option, staking_pool_whitelist_account_id: AccountId, foundation_account_id: Option }")
    
    a.noMoreArgs() // no more positional args should remain
    
    this.call("new",fnJSONParams)
    
  }
  
}
module.exports = ContractAPI;


// ----------------------------------------------
// generated by create-contract-cli from ./res/test/rust/multisig/src/lib.rs
// ---------------------------------------------
            
import { spawnNearCli } from "./util/SpawnNearCli.js"
import { CommandLineArgs } from "./util/CommandLineArgs.js"
import { options } from "./CLIOptions.js"

//name of this script
export const nickname = 'multisig'

//one function for each pub fn in the contract
//get parameters by consuming from CommandLineParser
export class ContractAPI {
        
  new_help =`
   Initialize multisig contract.
   @params num_confirmations: k of n signatures required to perform operations.
  #[init]
  
  usage:
  > multisig new 
  `;
  
  new(a /*:CommandLineArgs*/) {
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("JSON params")
    
    //--new has no arguments, if you add some, uncomment the following line
    //const fnJSONparams = a.consumeJSON("{ x:0, y:1, z:3 }")
    
    a.noMoreArgs() // no more positional args should remain
    
    const nearCliArgs = [
      "call",
      options.contractName.value,
      "new",
    ]
    
    a.addOptionsTo(nearCliArgs); //add any other --options found the command line
    
    spawnNearCli(nearCliArgs);
    
  }
  
  add_request_help =`
   Add request for multisig.
  
  usage:
  > multisig add_request { request: MultiSigRequest }
  `;
  
  add_request(a /*:CommandLineArgs*/) {
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("JSON params")
    
    //get fn arguments as JSON
    const fnJSONparams = a.consumeJSON("{ request: MultiSigRequest }")
    
    a.noMoreArgs() // no more positional args should remain
    
    const nearCliArgs = [
      "call",
      options.contractName.value,
      "add_request",
      fnJSONparams,
    ]
    
    a.addOptionsTo(nearCliArgs); //add any other --options found the command line
    
    spawnNearCli(nearCliArgs);
    
  }
  
  add_request_and_confirm_help =`
   Add request for multisig and confirm with the pk that added.
  
  usage:
  > multisig add_request_and_confirm { request: MultiSigRequest }
  `;
  
  add_request_and_confirm(a /*:CommandLineArgs*/) {
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("JSON params")
    
    //get fn arguments as JSON
    const fnJSONparams = a.consumeJSON("{ request: MultiSigRequest }")
    
    a.noMoreArgs() // no more positional args should remain
    
    const nearCliArgs = [
      "call",
      options.contractName.value,
      "add_request_and_confirm",
      fnJSONparams,
    ]
    
    a.addOptionsTo(nearCliArgs); //add any other --options found the command line
    
    spawnNearCli(nearCliArgs);
    
  }
  
  delete_request_help =`
   Remove given request and associated confirmations.
  
  usage:
  > multisig delete_request { request_id: RequestId }
  `;
  
  delete_request(a /*:CommandLineArgs*/) {
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("JSON params")
    
    //get fn arguments as JSON
    const fnJSONparams = a.consumeJSON("{ request_id: RequestId }")
    
    a.noMoreArgs() // no more positional args should remain
    
    const nearCliArgs = [
      "call",
      options.contractName.value,
      "delete_request",
      fnJSONparams,
    ]
    
    a.addOptionsTo(nearCliArgs); //add any other --options found the command line
    
    spawnNearCli(nearCliArgs);
    
  }
  
  confirm_help =`
   Confirm given request with given signing key.
   If with this, there has been enough confirmation, a promise with request will be scheduled.
  
  usage:
  > multisig confirm { request_id: RequestId }
  `;
  
  confirm(a /*:CommandLineArgs*/) {
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("JSON params")
    
    //get fn arguments as JSON
    const fnJSONparams = a.consumeJSON("{ request_id: RequestId }")
    
    a.noMoreArgs() // no more positional args should remain
    
    const nearCliArgs = [
      "call",
      options.contractName.value,
      "confirm",
      fnJSONparams,
    ]
    
    a.addOptionsTo(nearCliArgs); //add any other --options found the command line
    
    spawnNearCli(nearCliArgs);
    
  }
  
  get_request_help =`
  ********************************
    View methods
    ********************************
  
  usage:
  > multisig get_request { request_id: RequestId }
  `;
  
  get_request(a /*:CommandLineArgs*/) {
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("JSON params")
    
    //get fn arguments as JSON
    const fnJSONparams = a.consumeJSON("{ request_id: RequestId }")
    
    a.noMoreArgs() // no more positional args should remain
    
    const nearCliArgs = [
      "view",
      options.contractName.value,
      "get_request",
      fnJSONparams,
    ]
    
    a.addOptionsTo(nearCliArgs); //add any other --options found the command line
    
    spawnNearCli(nearCliArgs);
    
  }
  
  get_num_requests_pk_help =`
  
  usage:
  > multisig get_num_requests_pk { public_key: Base58PublicKey }
  `;
  
  get_num_requests_pk(a /*:CommandLineArgs*/) {
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("JSON params")
    
    //get fn arguments as JSON
    const fnJSONparams = a.consumeJSON("{ public_key: Base58PublicKey }")
    
    a.noMoreArgs() // no more positional args should remain
    
    const nearCliArgs = [
      "view",
      options.contractName.value,
      "get_num_requests_pk",
      fnJSONparams,
    ]
    
    a.addOptionsTo(nearCliArgs); //add any other --options found the command line
    
    spawnNearCli(nearCliArgs);
    
  }
  
  list_request_ids_help =`
  
  usage:
  > multisig list_request_ids 
  `;
  
  list_request_ids(a /*:CommandLineArgs*/) {
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("JSON params")
    
    //--list_request_ids has no arguments, if you add some, uncomment the following line
    //const fnJSONparams = a.consumeJSON("{ x:0, y:1, z:3 }")
    
    a.noMoreArgs() // no more positional args should remain
    
    const nearCliArgs = [
      "view",
      options.contractName.value,
      "list_request_ids",
    ]
    
    a.addOptionsTo(nearCliArgs); //add any other --options found the command line
    
    spawnNearCli(nearCliArgs);
    
  }
  
  get_confirmations_help =`
  
  usage:
  > multisig get_confirmations { request_id: RequestId }
  `;
  
  get_confirmations(a /*:CommandLineArgs*/) {
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("JSON params")
    
    //get fn arguments as JSON
    const fnJSONparams = a.consumeJSON("{ request_id: RequestId }")
    
    a.noMoreArgs() // no more positional args should remain
    
    const nearCliArgs = [
      "view",
      options.contractName.value,
      "get_confirmations",
      fnJSONparams,
    ]
    
    a.addOptionsTo(nearCliArgs); //add any other --options found the command line
    
    spawnNearCli(nearCliArgs);
    
  }
  
  get_num_confirmations_help =`
  
  usage:
  > multisig get_num_confirmations 
  `;
  
  get_num_confirmations(a /*:CommandLineArgs*/) {
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("JSON params")
    
    //--get_num_confirmations has no arguments, if you add some, uncomment the following line
    //const fnJSONparams = a.consumeJSON("{ x:0, y:1, z:3 }")
    
    a.noMoreArgs() // no more positional args should remain
    
    const nearCliArgs = [
      "view",
      options.contractName.value,
      "get_num_confirmations",
    ]
    
    a.addOptionsTo(nearCliArgs); //add any other --options found the command line
    
    spawnNearCli(nearCliArgs);
    
  }
  
  get_request_nonce_help =`
  
  usage:
  > multisig get_request_nonce 
  `;
  
  get_request_nonce(a /*:CommandLineArgs*/) {
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("JSON params")
    
    //--get_request_nonce has no arguments, if you add some, uncomment the following line
    //const fnJSONparams = a.consumeJSON("{ x:0, y:1, z:3 }")
    
    a.noMoreArgs() // no more positional args should remain
    
    const nearCliArgs = [
      "view",
      options.contractName.value,
      "get_request_nonce",
    ]
    
    a.addOptionsTo(nearCliArgs); //add any other --options found the command line
    
    spawnNearCli(nearCliArgs);
    
  }
  
}


    // ----------------------------------------------
    // generated by create-contract-cli from ./res/test/rust/multisig/src/lib.rs
    // ---------------------------------------------

    const color = require("./util/color.js");
    const nearCli = require("./util/SpawnNearCli.js");
    const options = require("./CLIOptions.js");
    const cliConfig = require("./CLIConfig.js");

    // name of this script
    const nickname = cliConfig.nickname;

    // one function for each pub fn in the contract
    // get parameters by consuming from CommandLineParser
    class ContractAPI {

        // this.view helper function
        _view(command/*:string*/, fnJSONParams/*?:any*/) /*:string*/ {
            return nearCli.view(cliConfig.contractAccount, command, fnJSONParams, options)
        }
        // this.call helper function
        _call(command/*:string*/, fnJSONParams/*?:any*/) /*:string*/ {
            return nearCli.call(cliConfig.contractAccount, command, fnJSONParams, options)
        }
    
    
  new_HELP(){ return `
   Initialize multisig contract.
   @params num_confirmations: k of n signatures required to perform operations.
  #[init]
  
  usage:
  > multisig new 
  `};
  
  new(a /*:CommandLineArgs*/) /*:void*/{
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("{ account:userAccount, amount:xxN }")
    
    //--new has no arguments, if you add some, uncomment the following line and send the params in this.call/view
    //const fnJSONParams = a.consumeJSON("{ x:0, y:1, z:3 }")
    
    a.noMoreArgs() // no more positional args should remain
    
    this._call("new")
    
  }
  
  add_request_HELP(){ return `
   Add request for multisig.
  
  usage:
  > multisig add_request { request: MultiSigRequest }
  `};
  
  add_request(a /*:CommandLineArgs*/) /*:void*/{
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("{ account:userAccount, amount:xxN }")
    
    //get fn arguments as JSON
    const fnJSONParams = a.consumeJSON("{ request: MultiSigRequest }")
    
    a.noMoreArgs() // no more positional args should remain
    
    this._call("add_request",fnJSONParams)
    
  }
  
  add_request_and_confirm_HELP(){ return `
   Add request for multisig and confirm with the pk that added.
  
  usage:
  > multisig add_request_and_confirm { request: MultiSigRequest }
  `};
  
  add_request_and_confirm(a /*:CommandLineArgs*/) /*:void*/{
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("{ account:userAccount, amount:xxN }")
    
    //get fn arguments as JSON
    const fnJSONParams = a.consumeJSON("{ request: MultiSigRequest }")
    
    a.noMoreArgs() // no more positional args should remain
    
    this._call("add_request_and_confirm",fnJSONParams)
    
  }
  
  delete_request_HELP(){ return `
   Remove given request and associated confirmations.
  
  usage:
  > multisig delete_request { request_id: RequestId }
  `};
  
  delete_request(a /*:CommandLineArgs*/) /*:void*/{
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("{ account:userAccount, amount:xxN }")
    
    //get fn arguments as JSON
    const fnJSONParams = a.consumeJSON("{ request_id: RequestId }")
    
    a.noMoreArgs() // no more positional args should remain
    
    this._call("delete_request",fnJSONParams)
    
  }
  
  confirm_HELP(){ return `
   Confirm given request with given signing key.
   If with this, there has been enough confirmation, a promise with request will be scheduled.
  
  usage:
  > multisig confirm { request_id: RequestId }
  `};
  
  confirm(a /*:CommandLineArgs*/) /*:void*/{
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("{ account:userAccount, amount:xxN }")
    
    //get fn arguments as JSON
    const fnJSONParams = a.consumeJSON("{ request_id: RequestId }")
    
    a.noMoreArgs() // no more positional args should remain
    
    this._call("confirm",fnJSONParams)
    
  }
  
  get_request_HELP(){ return `
  ********************************
    View methods
    ********************************
  
  usage:
  > multisig get_request { request_id: RequestId }
  `};
  
  get_request(a /*:CommandLineArgs*/) /*:string*/{
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("{ account:userAccount, amount:xxN }")
    
    //get fn arguments as JSON
    const fnJSONParams = a.consumeJSON("{ request_id: RequestId }")
    
    a.noMoreArgs() // no more positional args should remain
    
    return this._view("get_request",fnJSONParams)
    
  }
  
  get_num_requests_pk_HELP(){ return `
  
  usage:
  > multisig get_num_requests_pk { public_key: Base58PublicKey }
  `};
  
  get_num_requests_pk(a /*:CommandLineArgs*/) /*:string*/{
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("{ account:userAccount, amount:xxN }")
    
    //get fn arguments as JSON
    const fnJSONParams = a.consumeJSON("{ public_key: Base58PublicKey }")
    
    a.noMoreArgs() // no more positional args should remain
    
    return this._view("get_num_requests_pk",fnJSONParams)
    
  }
  
  list_request_ids_HELP(){ return `
  
  usage:
  > multisig list_request_ids 
  `};
  
  list_request_ids(a /*:CommandLineArgs*/) /*:string*/{
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("{ account:userAccount, amount:xxN }")
    
    //--list_request_ids has no arguments, if you add some, uncomment the following line and send the params in this.call/view
    //const fnJSONParams = a.consumeJSON("{ x:0, y:1, z:3 }")
    
    a.noMoreArgs() // no more positional args should remain
    
    return this._view("list_request_ids")
    
  }
  
  get_confirmations_HELP(){ return `
  
  usage:
  > multisig get_confirmations { request_id: RequestId }
  `};
  
  get_confirmations(a /*:CommandLineArgs*/) /*:string*/{
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("{ account:userAccount, amount:xxN }")
    
    //get fn arguments as JSON
    const fnJSONParams = a.consumeJSON("{ request_id: RequestId }")
    
    a.noMoreArgs() // no more positional args should remain
    
    return this._view("get_confirmations",fnJSONParams)
    
  }
  
  get_num_confirmations_HELP(){ return `
  
  usage:
  > multisig get_num_confirmations 
  `};
  
  get_num_confirmations(a /*:CommandLineArgs*/) /*:string*/{
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("{ account:userAccount, amount:xxN }")
    
    //--get_num_confirmations has no arguments, if you add some, uncomment the following line and send the params in this.call/view
    //const fnJSONParams = a.consumeJSON("{ x:0, y:1, z:3 }")
    
    a.noMoreArgs() // no more positional args should remain
    
    return this._view("get_num_confirmations")
    
  }
  
  get_request_nonce_HELP(){ return `
  
  usage:
  > multisig get_request_nonce 
  `};
  
  get_request_nonce(a /*:CommandLineArgs*/) /*:string*/{
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("{ account:userAccount, amount:xxN }")
    
    //--get_request_nonce has no arguments, if you add some, uncomment the following line and send the params in this.call/view
    //const fnJSONParams = a.consumeJSON("{ x:0, y:1, z:3 }")
    
    a.noMoreArgs() // no more positional args should remain
    
    return this._view("get_request_nonce")
    
  }
  
}
module.exports = ContractAPI;


// ----------------------------------------------
// generated by create-contract-cli from ./res/test/staking-pool/src/lib.rs
// ---------------------------------------------
            
import { spawnNearCli } from "./util/SpawnNearCli.js"
import { CommandLineArgs } from "./util/CommandLineArgs.js"
import { commonCliOptions } from "./util/CommonCLIOptions.js"

//name of this script
export const NickName = 'tom'
//account id where this contrat is deployed
export const defaultContractName = 'tomstaker.stakehouse.betanet'

//one function for each pub fn in the contract
//get parameters by consuming from CommandLineParser
export class ContractAPI {
        
  new_help =`
   Initializes the contract with the given owner_id, initial staking public key (with ED25519
   curve) and initial reward fee fraction that owner charges for the validation work.
   The entire current balance of this contract will be used to stake. This allows contract to
   always maintain staking shares that can't be unstaked or withdrawn.
   It prevents inflating the price of the share too much.
  #[init]
  
  usage:
  > tom new { owner_id: AccountId, stake_public_key: Base58PublicKey, reward_fee_fraction: RewardFeeFraction }`;
  
  new(a /*:CommandLineArgs*/) {
    
    //consume contract name from options if present
    const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName
    
    //--these are some examples on how to consume arguments
    //const argument = a.consumeString("api argument")
    //const argumentJson = a.consumeJSON("JSON argument")
    
    //get fn arguments as JSON
    const params = a.consumeJSON("{ owner_id: AccountId, stake_public_key: Base58PublicKey, reward_fee_fraction: RewardFeeFraction }")
    
    a.noMoreArgs() //end of arguments
    
    const nearCliArgs = [
      "view",
      contract,
      "new",
      JSON.stringify(params)
    ]
    
    a.addOptionsTo(nearCliArgs); //add any other --options found the command line
    
    spawnNearCli(nearCliArgs);
    
  }
  
  ping_help =`
   Distributes rewards and restakes if needed.
  
  usage:
  > tom ping `;
  
  ping(a /*:CommandLineArgs*/) {
    
    //consume contract name from options if present
    const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName
    
    //--these are some examples on how to consume arguments
    //const argument = a.consumeString("api argument")
    //const argumentJson = a.consumeJSON("JSON argument")
    
    //--ping has no arguments, if you add some, uncomment the following line
    //const params = a.consumeJSON("{ x:0, y:1, z:3 }")
    
    a.noMoreArgs() //end of arguments
    
    const nearCliArgs = [
      "call",
      contract,
      "ping",
    ]
    
    a.addOptionsTo(nearCliArgs); //add any other --options found the command line
    
    spawnNearCli(nearCliArgs);
    
  }
  
  deposit_help =`
   Deposits the attached amount into the inner account of the predecessor.
  #[payable]
  
  usage:
  > tom deposit `;
  
  deposit(a /*:CommandLineArgs*/) {
    
    //consume contract name from options if present
    const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName
    
    //function is #payable, --amount option is required
    //IMPORTANT! manually check if the function requires YOCTONEAR and change the 2nd param to 'Y'
    a.requireOptionWithAmount(commonCliOptions.amount,'N'); //contract require an amount in expressed in N=NEARS, Y=YoctoNears
    //--these are some examples on how to consume arguments
    //const argument = a.consumeString("api argument")
    //const argumentJson = a.consumeJSON("JSON argument")
    
    //--deposit has no arguments, if you add some, uncomment the following line
    //const params = a.consumeJSON("{ x:0, y:1, z:3 }")
    
    a.noMoreArgs() //end of arguments
    
    const nearCliArgs = [
      "call",
      contract,
      "deposit",
    ]
    
    a.addOptionsTo(nearCliArgs); //add any other --options found the command line
    
    spawnNearCli(nearCliArgs);
    
  }
  
  deposit_and_stake_help =`
   Deposits the attached amount into the inner account of the predecessor and stakes it.
  #[payable]
  
  usage:
  > tom deposit_and_stake `;
  
  deposit_and_stake(a /*:CommandLineArgs*/) {
    
    //consume contract name from options if present
    const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName
    
    //function is #payable, --amount option is required
    //IMPORTANT! manually check if the function requires YOCTONEAR and change the 2nd param to 'Y'
    a.requireOptionWithAmount(commonCliOptions.amount,'N'); //contract require an amount in expressed in N=NEARS, Y=YoctoNears
    //--these are some examples on how to consume arguments
    //const argument = a.consumeString("api argument")
    //const argumentJson = a.consumeJSON("JSON argument")
    
    //--deposit_and_stake has no arguments, if you add some, uncomment the following line
    //const params = a.consumeJSON("{ x:0, y:1, z:3 }")
    
    a.noMoreArgs() //end of arguments
    
    const nearCliArgs = [
      "call",
      contract,
      "deposit_and_stake",
    ]
    
    a.addOptionsTo(nearCliArgs); //add any other --options found the command line
    
    spawnNearCli(nearCliArgs);
    
  }
  
  withdraw_all_help =`
   Withdraws the entire unstaked balance from the predecessor account.
   It's only allowed if the 'unstake' action was not performed in the four most recent epochs.
  
  usage:
  > tom withdraw_all `;
  
  withdraw_all(a /*:CommandLineArgs*/) {
    
    //consume contract name from options if present
    const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName
    
    //--these are some examples on how to consume arguments
    //const argument = a.consumeString("api argument")
    //const argumentJson = a.consumeJSON("JSON argument")
    
    //--withdraw_all has no arguments, if you add some, uncomment the following line
    //const params = a.consumeJSON("{ x:0, y:1, z:3 }")
    
    a.noMoreArgs() //end of arguments
    
    const nearCliArgs = [
      "call",
      contract,
      "withdraw_all",
    ]
    
    a.addOptionsTo(nearCliArgs); //add any other --options found the command line
    
    spawnNearCli(nearCliArgs);
    
  }
  
  withdraw_help =`
   Withdraws the non staked balance for given account.
   It's only allowed if the 'unstake' action was not performed in the four most recent epochs.
  
  usage:
  > tom withdraw { amount: U128 }`;
  
  withdraw(a /*:CommandLineArgs*/) {
    
    //consume contract name from options if present
    const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName
    
    //--these are some examples on how to consume arguments
    //const argument = a.consumeString("api argument")
    //const argumentJson = a.consumeJSON("JSON argument")
    
    //get fn arguments as JSON
    const params = a.consumeJSON("{ amount: U128 }")
    
    a.noMoreArgs() //end of arguments
    
    const nearCliArgs = [
      "call",
      contract,
      "withdraw",
      JSON.stringify(params)
    ]
    
    a.addOptionsTo(nearCliArgs); //add any other --options found the command line
    
    spawnNearCli(nearCliArgs);
    
  }
  
  stake_all_help =`
   Stakes all available unstaked balance from the inner account of the predecessor.
  
  usage:
  > tom stake_all `;
  
  stake_all(a /*:CommandLineArgs*/) {
    
    //consume contract name from options if present
    const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName
    
    //--these are some examples on how to consume arguments
    //const argument = a.consumeString("api argument")
    //const argumentJson = a.consumeJSON("JSON argument")
    
    //--stake_all has no arguments, if you add some, uncomment the following line
    //const params = a.consumeJSON("{ x:0, y:1, z:3 }")
    
    a.noMoreArgs() //end of arguments
    
    const nearCliArgs = [
      "call",
      contract,
      "stake_all",
    ]
    
    a.addOptionsTo(nearCliArgs); //add any other --options found the command line
    
    spawnNearCli(nearCliArgs);
    
  }
  
  stake_help =`
   Stakes the given amount from the inner account of the predecessor.
   The inner account should have enough unstaked balance.
  
  usage:
  > tom stake { amount: U128 }`;
  
  stake(a /*:CommandLineArgs*/) {
    
    //consume contract name from options if present
    const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName
    
    //--these are some examples on how to consume arguments
    //const argument = a.consumeString("api argument")
    //const argumentJson = a.consumeJSON("JSON argument")
    
    //get fn arguments as JSON
    const params = a.consumeJSON("{ amount: U128 }")
    
    a.noMoreArgs() //end of arguments
    
    const nearCliArgs = [
      "call",
      contract,
      "stake",
      JSON.stringify(params)
    ]
    
    a.addOptionsTo(nearCliArgs); //add any other --options found the command line
    
    spawnNearCli(nearCliArgs);
    
  }
  
  unstake_all_help =`
   Unstakes all staked balance from the inner account of the predecessor.
   The new total unstaked balance will be available for withdrawal in four epochs.
  
  usage:
  > tom unstake_all `;
  
  unstake_all(a /*:CommandLineArgs*/) {
    
    //consume contract name from options if present
    const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName
    
    //--these are some examples on how to consume arguments
    //const argument = a.consumeString("api argument")
    //const argumentJson = a.consumeJSON("JSON argument")
    
    //--unstake_all has no arguments, if you add some, uncomment the following line
    //const params = a.consumeJSON("{ x:0, y:1, z:3 }")
    
    a.noMoreArgs() //end of arguments
    
    const nearCliArgs = [
      "call",
      contract,
      "unstake_all",
    ]
    
    a.addOptionsTo(nearCliArgs); //add any other --options found the command line
    
    spawnNearCli(nearCliArgs);
    
  }
  
  unstake_help =`
   Unstakes the given amount from the inner account of the predecessor.
   The inner account should have enough staked balance.
   The new total unstaked balance will be available for withdrawal in four epochs.
  
  usage:
  > tom unstake { amount: U128 }`;
  
  unstake(a /*:CommandLineArgs*/) {
    
    //consume contract name from options if present
    const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName
    
    //--these are some examples on how to consume arguments
    //const argument = a.consumeString("api argument")
    //const argumentJson = a.consumeJSON("JSON argument")
    
    //get fn arguments as JSON
    const params = a.consumeJSON("{ amount: U128 }")
    
    a.noMoreArgs() //end of arguments
    
    const nearCliArgs = [
      "call",
      contract,
      "unstake",
      JSON.stringify(params)
    ]
    
    a.addOptionsTo(nearCliArgs); //add any other --options found the command line
    
    spawnNearCli(nearCliArgs);
    
  }
  
  get_account_unstaked_balance_help =`
  ****************/
  * View methods */
  ****************/
   Returns the unstaked balance of the given account.
  
  usage:
  > tom get_account_unstaked_balance { account_id: AccountId }`;
  
  get_account_unstaked_balance(a /*:CommandLineArgs*/) {
    
    //consume contract name from options if present
    const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName
    
    //--these are some examples on how to consume arguments
    //const argument = a.consumeString("api argument")
    //const argumentJson = a.consumeJSON("JSON argument")
    
    //get fn arguments as JSON
    const params = a.consumeJSON("{ account_id: AccountId }")
    
    a.noMoreArgs() //end of arguments
    
    const nearCliArgs = [
      "view",
      contract,
      "get_account_unstaked_balance",
      JSON.stringify(params)
    ]
    
    a.addOptionsTo(nearCliArgs); //add any other --options found the command line
    
    spawnNearCli(nearCliArgs);
    
  }
  
  get_account_staked_balance_help =`
   Returns the staked balance of the given account.
   NOTE: This is computed from the amount of "stake" shares the given account has and the
   current amount of total staked balance and total stake shares on the account.
  
  usage:
  > tom get_account_staked_balance { account_id: AccountId }`;
  
  get_account_staked_balance(a /*:CommandLineArgs*/) {
    
    //consume contract name from options if present
    const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName
    
    //--these are some examples on how to consume arguments
    //const argument = a.consumeString("api argument")
    //const argumentJson = a.consumeJSON("JSON argument")
    
    //get fn arguments as JSON
    const params = a.consumeJSON("{ account_id: AccountId }")
    
    a.noMoreArgs() //end of arguments
    
    const nearCliArgs = [
      "view",
      contract,
      "get_account_staked_balance",
      JSON.stringify(params)
    ]
    
    a.addOptionsTo(nearCliArgs); //add any other --options found the command line
    
    spawnNearCli(nearCliArgs);
    
  }
  
  get_account_total_balance_help =`
   Returns the total balance of the given account (including staked and unstaked balances).
  
  usage:
  > tom get_account_total_balance { account_id: AccountId }`;
  
  get_account_total_balance(a /*:CommandLineArgs*/) {
    
    //consume contract name from options if present
    const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName
    
    //--these are some examples on how to consume arguments
    //const argument = a.consumeString("api argument")
    //const argumentJson = a.consumeJSON("JSON argument")
    
    //get fn arguments as JSON
    const params = a.consumeJSON("{ account_id: AccountId }")
    
    a.noMoreArgs() //end of arguments
    
    const nearCliArgs = [
      "view",
      contract,
      "get_account_total_balance",
      JSON.stringify(params)
    ]
    
    a.addOptionsTo(nearCliArgs); //add any other --options found the command line
    
    spawnNearCli(nearCliArgs);
    
  }
  
  is_account_unstaked_balance_available_help =`
   Returns 'true' if the given account can withdraw tokens in the current epoch.
  
  usage:
  > tom is_account_unstaked_balance_available { account_id: AccountId }`;
  
  is_account_unstaked_balance_available(a /*:CommandLineArgs*/) {
    
    //consume contract name from options if present
    const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName
    
    //--these are some examples on how to consume arguments
    //const argument = a.consumeString("api argument")
    //const argumentJson = a.consumeJSON("JSON argument")
    
    //get fn arguments as JSON
    const params = a.consumeJSON("{ account_id: AccountId }")
    
    a.noMoreArgs() //end of arguments
    
    const nearCliArgs = [
      "view",
      contract,
      "is_account_unstaked_balance_available",
      JSON.stringify(params)
    ]
    
    a.addOptionsTo(nearCliArgs); //add any other --options found the command line
    
    spawnNearCli(nearCliArgs);
    
  }
  
  get_total_staked_balance_help =`
   Returns the total staking balance.
  
  usage:
  > tom get_total_staked_balance `;
  
  get_total_staked_balance(a /*:CommandLineArgs*/) {
    
    //consume contract name from options if present
    const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName
    
    //--these are some examples on how to consume arguments
    //const argument = a.consumeString("api argument")
    //const argumentJson = a.consumeJSON("JSON argument")
    
    //--get_total_staked_balance has no arguments, if you add some, uncomment the following line
    //const params = a.consumeJSON("{ x:0, y:1, z:3 }")
    
    a.noMoreArgs() //end of arguments
    
    const nearCliArgs = [
      "view",
      contract,
      "get_total_staked_balance",
    ]
    
    a.addOptionsTo(nearCliArgs); //add any other --options found the command line
    
    spawnNearCli(nearCliArgs);
    
  }
  
  get_owner_id_help =`
   Returns account ID of the staking pool owner.
  
  usage:
  > tom get_owner_id `;
  
  get_owner_id(a /*:CommandLineArgs*/) {
    
    //consume contract name from options if present
    const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName
    
    //--these are some examples on how to consume arguments
    //const argument = a.consumeString("api argument")
    //const argumentJson = a.consumeJSON("JSON argument")
    
    //--get_owner_id has no arguments, if you add some, uncomment the following line
    //const params = a.consumeJSON("{ x:0, y:1, z:3 }")
    
    a.noMoreArgs() //end of arguments
    
    const nearCliArgs = [
      "view",
      contract,
      "get_owner_id",
    ]
    
    a.addOptionsTo(nearCliArgs); //add any other --options found the command line
    
    spawnNearCli(nearCliArgs);
    
  }
  
  get_reward_fee_fraction_help =`
   Returns the current reward fee as a fraction.
  
  usage:
  > tom get_reward_fee_fraction `;
  
  get_reward_fee_fraction(a /*:CommandLineArgs*/) {
    
    //consume contract name from options if present
    const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName
    
    //--these are some examples on how to consume arguments
    //const argument = a.consumeString("api argument")
    //const argumentJson = a.consumeJSON("JSON argument")
    
    //--get_reward_fee_fraction has no arguments, if you add some, uncomment the following line
    //const params = a.consumeJSON("{ x:0, y:1, z:3 }")
    
    a.noMoreArgs() //end of arguments
    
    const nearCliArgs = [
      "view",
      contract,
      "get_reward_fee_fraction",
    ]
    
    a.addOptionsTo(nearCliArgs); //add any other --options found the command line
    
    spawnNearCli(nearCliArgs);
    
  }
  
  get_staking_key_help =`
   Returns the staking public key
  
  usage:
  > tom get_staking_key `;
  
  get_staking_key(a /*:CommandLineArgs*/) {
    
    //consume contract name from options if present
    const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName
    
    //--these are some examples on how to consume arguments
    //const argument = a.consumeString("api argument")
    //const argumentJson = a.consumeJSON("JSON argument")
    
    //--get_staking_key has no arguments, if you add some, uncomment the following line
    //const params = a.consumeJSON("{ x:0, y:1, z:3 }")
    
    a.noMoreArgs() //end of arguments
    
    const nearCliArgs = [
      "view",
      contract,
      "get_staking_key",
    ]
    
    a.addOptionsTo(nearCliArgs); //add any other --options found the command line
    
    spawnNearCli(nearCliArgs);
    
  }
  
  is_staking_paused_help =`
   Returns true if the staking is paused
  
  usage:
  > tom is_staking_paused `;
  
  is_staking_paused(a /*:CommandLineArgs*/) {
    
    //consume contract name from options if present
    const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName
    
    //--these are some examples on how to consume arguments
    //const argument = a.consumeString("api argument")
    //const argumentJson = a.consumeJSON("JSON argument")
    
    //--is_staking_paused has no arguments, if you add some, uncomment the following line
    //const params = a.consumeJSON("{ x:0, y:1, z:3 }")
    
    a.noMoreArgs() //end of arguments
    
    const nearCliArgs = [
      "view",
      contract,
      "is_staking_paused",
    ]
    
    a.addOptionsTo(nearCliArgs); //add any other --options found the command line
    
    spawnNearCli(nearCliArgs);
    
  }
  
  get_account_help =`
   Returns human readable representation of the account for the given account ID.
  
  usage:
  > tom get_account { account_id: AccountId }`;
  
  get_account(a /*:CommandLineArgs*/) {
    
    //consume contract name from options if present
    const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName
    
    //--these are some examples on how to consume arguments
    //const argument = a.consumeString("api argument")
    //const argumentJson = a.consumeJSON("JSON argument")
    
    //get fn arguments as JSON
    const params = a.consumeJSON("{ account_id: AccountId }")
    
    a.noMoreArgs() //end of arguments
    
    const nearCliArgs = [
      "view",
      contract,
      "get_account",
      JSON.stringify(params)
    ]
    
    a.addOptionsTo(nearCliArgs); //add any other --options found the command line
    
    spawnNearCli(nearCliArgs);
    
  }
  
  get_number_of_accounts_help =`
   Returns the number of accounts that have positive balance on this staking pool.
  
  usage:
  > tom get_number_of_accounts `;
  
  get_number_of_accounts(a /*:CommandLineArgs*/) {
    
    //consume contract name from options if present
    const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName
    
    //--these are some examples on how to consume arguments
    //const argument = a.consumeString("api argument")
    //const argumentJson = a.consumeJSON("JSON argument")
    
    //--get_number_of_accounts has no arguments, if you add some, uncomment the following line
    //const params = a.consumeJSON("{ x:0, y:1, z:3 }")
    
    a.noMoreArgs() //end of arguments
    
    const nearCliArgs = [
      "view",
      contract,
      "get_number_of_accounts",
    ]
    
    a.addOptionsTo(nearCliArgs); //add any other --options found the command line
    
    spawnNearCli(nearCliArgs);
    
  }
  
  get_accounts_help =`
   Returns the list of accounts
  
  usage:
  > tom get_accounts { from_index: u64, limit: u64 }`;
  
  get_accounts(a /*:CommandLineArgs*/) {
    
    //consume contract name from options if present
    const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName
    
    //--these are some examples on how to consume arguments
    //const argument = a.consumeString("api argument")
    //const argumentJson = a.consumeJSON("JSON argument")
    
    //get fn arguments as JSON
    const params = a.consumeJSON("{ from_index: u64, limit: u64 }")
    
    a.noMoreArgs() //end of arguments
    
    const nearCliArgs = [
      "view",
      contract,
      "get_accounts",
      JSON.stringify(params)
    ]
    
    a.addOptionsTo(nearCliArgs); //add any other --options found the command line
    
    spawnNearCli(nearCliArgs);
    
  }
  
  on_stake_action_help =`
  *************/
  * Callbacks */
  *************/
  
  usage:
  > tom on_stake_action `;
  
  on_stake_action(a /*:CommandLineArgs*/) {
    
    //consume contract name from options if present
    const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName
    
    //--these are some examples on how to consume arguments
    //const argument = a.consumeString("api argument")
    //const argumentJson = a.consumeJSON("JSON argument")
    
    //--on_stake_action has no arguments, if you add some, uncomment the following line
    //const params = a.consumeJSON("{ x:0, y:1, z:3 }")
    
    a.noMoreArgs() //end of arguments
    
    const nearCliArgs = [
      "call",
      contract,
      "on_stake_action",
    ]
    
    a.addOptionsTo(nearCliArgs); //add any other --options found the command line
    
    spawnNearCli(nearCliArgs);
    
  }
  
  update_staking_key_help =`
  *******************/
  * Owner's methods */
  *******************/
   Owner's method.
   Updates current public key to the new given public key.
  
  usage:
  > tom update_staking_key { stake_public_key: Base58PublicKey }`;
  
  update_staking_key(a /*:CommandLineArgs*/) {
    
    //consume contract name from options if present
    const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName
    
    //--these are some examples on how to consume arguments
    //const argument = a.consumeString("api argument")
    //const argumentJson = a.consumeJSON("JSON argument")
    
    //get fn arguments as JSON
    const params = a.consumeJSON("{ stake_public_key: Base58PublicKey }")
    
    a.noMoreArgs() //end of arguments
    
    const nearCliArgs = [
      "call",
      contract,
      "update_staking_key",
      JSON.stringify(params)
    ]
    
    a.addOptionsTo(nearCliArgs); //add any other --options found the command line
    
    spawnNearCli(nearCliArgs);
    
  }
  
  update_reward_fee_fraction_help =`
   Owner's method.
   Updates current reward fee fraction to the new given fraction.
  
  usage:
  > tom update_reward_fee_fraction { reward_fee_fraction: RewardFeeFraction }`;
  
  update_reward_fee_fraction(a /*:CommandLineArgs*/) {
    
    //consume contract name from options if present
    const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName
    
    //--these are some examples on how to consume arguments
    //const argument = a.consumeString("api argument")
    //const argumentJson = a.consumeJSON("JSON argument")
    
    //get fn arguments as JSON
    const params = a.consumeJSON("{ reward_fee_fraction: RewardFeeFraction }")
    
    a.noMoreArgs() //end of arguments
    
    const nearCliArgs = [
      "call",
      contract,
      "update_reward_fee_fraction",
      JSON.stringify(params)
    ]
    
    a.addOptionsTo(nearCliArgs); //add any other --options found the command line
    
    spawnNearCli(nearCliArgs);
    
  }
  
  vote_help =`
   Owner's method.
   Calls 'vote(is_vote)' on the given voting contract account ID on behalf of the pool.
  
  usage:
  > tom vote { voting_account_id: AccountId, is_vote: bool }`;
  
  vote(a /*:CommandLineArgs*/) {
    
    //consume contract name from options if present
    const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName
    
    //--these are some examples on how to consume arguments
    //const argument = a.consumeString("api argument")
    //const argumentJson = a.consumeJSON("JSON argument")
    
    //get fn arguments as JSON
    const params = a.consumeJSON("{ voting_account_id: AccountId, is_vote: bool }")
    
    a.noMoreArgs() //end of arguments
    
    const nearCliArgs = [
      "call",
      contract,
      "vote",
      JSON.stringify(params)
    ]
    
    a.addOptionsTo(nearCliArgs); //add any other --options found the command line
    
    spawnNearCli(nearCliArgs);
    
  }
  
  pause_staking_help =`
   Owner's method.
   Pauses pool staking.
  
  usage:
  > tom pause_staking `;
  
  pause_staking(a /*:CommandLineArgs*/) {
    
    //consume contract name from options if present
    const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName
    
    //--these are some examples on how to consume arguments
    //const argument = a.consumeString("api argument")
    //const argumentJson = a.consumeJSON("JSON argument")
    
    //--pause_staking has no arguments, if you add some, uncomment the following line
    //const params = a.consumeJSON("{ x:0, y:1, z:3 }")
    
    a.noMoreArgs() //end of arguments
    
    const nearCliArgs = [
      "call",
      contract,
      "pause_staking",
    ]
    
    a.addOptionsTo(nearCliArgs); //add any other --options found the command line
    
    spawnNearCli(nearCliArgs);
    
  }
  
  resume_staking_help =`
   Owner's method.
   Resumes pool staking.
  
  usage:
  > tom resume_staking `;
  
  resume_staking(a /*:CommandLineArgs*/) {
    
    //consume contract name from options if present
    const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName
    
    //--these are some examples on how to consume arguments
    //const argument = a.consumeString("api argument")
    //const argumentJson = a.consumeJSON("JSON argument")
    
    //--resume_staking has no arguments, if you add some, uncomment the following line
    //const params = a.consumeJSON("{ x:0, y:1, z:3 }")
    
    a.noMoreArgs() //end of arguments
    
    const nearCliArgs = [
      "call",
      contract,
      "resume_staking",
    ]
    
    a.addOptionsTo(nearCliArgs); //add any other --options found the command line
    
    spawnNearCli(nearCliArgs);
    
  }
  
}


    // ----------------------------------------------
    // generated by create-contract-cli from ./res/test/rust/staking-pool/src/lib.rs
    // ---------------------------------------------

    const color = require("./util/color.js");
    const nearCli = require("./util/SpawnNearCli.js");
    const options = require("./CLIOptions.js");
    const cliConfig = require("./CLIConfig.js");

    // name of this script
    const nickname = cliConfig.nickname;

    // one function for each pub fn in the contract
    // get parameters by consuming from CommandLineParser
    class ContractAPI {

        // this.view helper function
        _view(command/*:string*/, fnJSONParams/*?:any*/) /*:string*/ {
            return nearCli.view(cliConfig.contractAccount, command, fnJSONParams, options)
        }
        // this.call helper function
        _call(command/*:string*/, fnJSONParams/*?:any*/) /*:string*/ {
            return nearCli.call(cliConfig.contractAccount, command, fnJSONParams, options)
        }
    
    
  new_HELP(){ return `
   Initializes the contract with the given owner_id, initial staking public key (with ED25519
   curve) and initial reward fee fraction that owner charges for the validation work.
   The entire current balance of this contract will be used to stake. This allows contract to
   always maintain staking shares that can't be unstaked or withdrawn.
   It prevents inflating the price of the share too much.
  #[init]
  
  usage:
  > staky new { owner_id: AccountId, stake_public_key: Base58PublicKey, reward_fee_fraction: RewardFeeFraction }
  `};
  
  new(a /*:CommandLineArgs*/) /*:void*/{
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("{ account:userAccount, amount:xxN }")
    
    //get fn arguments as JSON
    const fnJSONParams = a.consumeJSON("{ owner_id: AccountId, stake_public_key: Base58PublicKey, reward_fee_fraction: RewardFeeFraction }")
    
    a.noMoreArgs() // no more positional args should remain
    
    this._call("new",fnJSONParams)
    
  }
  
  ping_HELP(){ return `
   Distributes rewards and restakes if needed.
  
  usage:
  > staky ping 
  `};
  
  ping(a /*:CommandLineArgs*/) /*:void*/{
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("{ account:userAccount, amount:xxN }")
    
    //--ping has no arguments, if you add some, uncomment the following line and send the params in this.call/view
    //const fnJSONParams = a.consumeJSON("{ x:0, y:1, z:3 }")
    
    a.noMoreArgs() // no more positional args should remain
    
    this._call("ping")
    
  }
  
  deposit_HELP(){ return `
   Deposits the attached amount into the inner account of the predecessor.
  #[payable]
  
  usage:
  > staky deposit 
  `};
  
  deposit(a /*:CommandLineArgs*/) /*:void*/{
    
    //function is #payable, --amount option is required
    a.requireOptionWithAmount(options.amount,'N'); //contract fn is payable, --amount expressed in N=NEARS is required
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("{ account:userAccount, amount:xxN }")
    
    //--deposit has no arguments, if you add some, uncomment the following line and send the params in this.call/view
    //const fnJSONParams = a.consumeJSON("{ x:0, y:1, z:3 }")
    
    a.noMoreArgs() // no more positional args should remain
    
    this._call("deposit")
    
  }
  
  deposit_and_stake_HELP(){ return `
   Deposits the attached amount into the inner account of the predecessor and stakes it.
  #[payable]
  
  usage:
  > staky deposit_and_stake 
  `};
  
  deposit_and_stake(a /*:CommandLineArgs*/) /*:void*/{
    
    //function is #payable, --amount option is required
    a.requireOptionWithAmount(options.amount,'N'); //contract fn is payable, --amount expressed in N=NEARS is required
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("{ account:userAccount, amount:xxN }")
    
    //--deposit_and_stake has no arguments, if you add some, uncomment the following line and send the params in this.call/view
    //const fnJSONParams = a.consumeJSON("{ x:0, y:1, z:3 }")
    
    a.noMoreArgs() // no more positional args should remain
    
    this._call("deposit_and_stake")
    
  }
  
  withdraw_all_HELP(){ return `
   Withdraws the entire unstaked balance from the predecessor account.
   It's only allowed if the 'unstake' action was not performed in the four most recent epochs.
  
  usage:
  > staky withdraw_all 
  `};
  
  withdraw_all(a /*:CommandLineArgs*/) /*:void*/{
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("{ account:userAccount, amount:xxN }")
    
    //--withdraw_all has no arguments, if you add some, uncomment the following line and send the params in this.call/view
    //const fnJSONParams = a.consumeJSON("{ x:0, y:1, z:3 }")
    
    a.noMoreArgs() // no more positional args should remain
    
    this._call("withdraw_all")
    
  }
  
  withdraw_HELP(){ return `
   Withdraws the non staked balance for given account.
   It's only allowed if the 'unstake' action was not performed in the four most recent epochs.
  
  usage:
  > staky withdraw { amount: U128 }
  `};
  
  withdraw(a /*:CommandLineArgs*/) /*:void*/{
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("{ account:userAccount, amount:xxN }")
    
    //get fn arguments as JSON
    const fnJSONParams = a.consumeJSON("{ amount: U128 }")
    
    a.noMoreArgs() // no more positional args should remain
    
    this._call("withdraw",fnJSONParams)
    
  }
  
  stake_all_HELP(){ return `
   Stakes all available unstaked balance from the inner account of the predecessor.
  
  usage:
  > staky stake_all 
  `};
  
  stake_all(a /*:CommandLineArgs*/) /*:void*/{
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("{ account:userAccount, amount:xxN }")
    
    //--stake_all has no arguments, if you add some, uncomment the following line and send the params in this.call/view
    //const fnJSONParams = a.consumeJSON("{ x:0, y:1, z:3 }")
    
    a.noMoreArgs() // no more positional args should remain
    
    this._call("stake_all")
    
  }
  
  stake_HELP(){ return `
   Stakes the given amount from the inner account of the predecessor.
   The inner account should have enough unstaked balance.
  
  usage:
  > staky stake { amount: U128 }
  `};
  
  stake(a /*:CommandLineArgs*/) /*:void*/{
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("{ account:userAccount, amount:xxN }")
    
    //get fn arguments as JSON
    const fnJSONParams = a.consumeJSON("{ amount: U128 }")
    
    a.noMoreArgs() // no more positional args should remain
    
    this._call("stake",fnJSONParams)
    
  }
  
  unstake_all_HELP(){ return `
   Unstakes all staked balance from the inner account of the predecessor.
   The new total unstaked balance will be available for withdrawal in four epochs.
  
  usage:
  > staky unstake_all 
  `};
  
  unstake_all(a /*:CommandLineArgs*/) /*:void*/{
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("{ account:userAccount, amount:xxN }")
    
    //--unstake_all has no arguments, if you add some, uncomment the following line and send the params in this.call/view
    //const fnJSONParams = a.consumeJSON("{ x:0, y:1, z:3 }")
    
    a.noMoreArgs() // no more positional args should remain
    
    this._call("unstake_all")
    
  }
  
  unstake_HELP(){ return `
   Unstakes the given amount from the inner account of the predecessor.
   The inner account should have enough staked balance.
   The new total unstaked balance will be available for withdrawal in four epochs.
  
  usage:
  > staky unstake { amount: U128 }
  `};
  
  unstake(a /*:CommandLineArgs*/) /*:void*/{
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("{ account:userAccount, amount:xxN }")
    
    //get fn arguments as JSON
    const fnJSONParams = a.consumeJSON("{ amount: U128 }")
    
    a.noMoreArgs() // no more positional args should remain
    
    this._call("unstake",fnJSONParams)
    
  }
  
  get_account_unstaked_balance_HELP(){ return `
  ****************
  * View methods *
  ****************
   Returns the unstaked balance of the given account.
  
  usage:
  > staky get_account_unstaked_balance { account_id: AccountId }
  `};
  
  get_account_unstaked_balance(a /*:CommandLineArgs*/) /*:string*/{
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("{ account:userAccount, amount:xxN }")
    
    //get fn arguments as JSON
    const fnJSONParams = a.consumeJSON("{ account_id: AccountId }")
    
    a.noMoreArgs() // no more positional args should remain
    
    return this._view("get_account_unstaked_balance",fnJSONParams)
    
  }
  
  get_account_staked_balance_HELP(){ return `
   Returns the staked balance of the given account.
   NOTE: This is computed from the amount of "stake" shares the given account has and the
   current amount of total staked balance and total stake shares on the account.
  
  usage:
  > staky get_account_staked_balance { account_id: AccountId }
  `};
  
  get_account_staked_balance(a /*:CommandLineArgs*/) /*:string*/{
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("{ account:userAccount, amount:xxN }")
    
    //get fn arguments as JSON
    const fnJSONParams = a.consumeJSON("{ account_id: AccountId }")
    
    a.noMoreArgs() // no more positional args should remain
    
    return this._view("get_account_staked_balance",fnJSONParams)
    
  }
  
  get_account_total_balance_HELP(){ return `
   Returns the total balance of the given account (including staked and unstaked balances).
  
  usage:
  > staky get_account_total_balance { account_id: AccountId }
  `};
  
  get_account_total_balance(a /*:CommandLineArgs*/) /*:string*/{
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("{ account:userAccount, amount:xxN }")
    
    //get fn arguments as JSON
    const fnJSONParams = a.consumeJSON("{ account_id: AccountId }")
    
    a.noMoreArgs() // no more positional args should remain
    
    return this._view("get_account_total_balance",fnJSONParams)
    
  }
  
  is_account_unstaked_balance_available_HELP(){ return `
   Returns 'true' if the given account can withdraw tokens in the current epoch.
  
  usage:
  > staky is_account_unstaked_balance_available { account_id: AccountId }
  `};
  
  is_account_unstaked_balance_available(a /*:CommandLineArgs*/) /*:string*/{
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("{ account:userAccount, amount:xxN }")
    
    //get fn arguments as JSON
    const fnJSONParams = a.consumeJSON("{ account_id: AccountId }")
    
    a.noMoreArgs() // no more positional args should remain
    
    return this._view("is_account_unstaked_balance_available",fnJSONParams)
    
  }
  
  get_total_staked_balance_HELP(){ return `
   Returns the total staking balance.
  
  usage:
  > staky get_total_staked_balance 
  `};
  
  get_total_staked_balance(a /*:CommandLineArgs*/) /*:string*/{
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("{ account:userAccount, amount:xxN }")
    
    //--get_total_staked_balance has no arguments, if you add some, uncomment the following line and send the params in this.call/view
    //const fnJSONParams = a.consumeJSON("{ x:0, y:1, z:3 }")
    
    a.noMoreArgs() // no more positional args should remain
    
    return this._view("get_total_staked_balance")
    
  }
  
  get_owner_id_HELP(){ return `
   Returns account ID of the staking pool owner.
  
  usage:
  > staky get_owner_id 
  `};
  
  get_owner_id(a /*:CommandLineArgs*/) /*:string*/{
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("{ account:userAccount, amount:xxN }")
    
    //--get_owner_id has no arguments, if you add some, uncomment the following line and send the params in this.call/view
    //const fnJSONParams = a.consumeJSON("{ x:0, y:1, z:3 }")
    
    a.noMoreArgs() // no more positional args should remain
    
    return this._view("get_owner_id")
    
  }
  
  get_reward_fee_fraction_HELP(){ return `
   Returns the current reward fee as a fraction.
  
  usage:
  > staky get_reward_fee_fraction 
  `};
  
  get_reward_fee_fraction(a /*:CommandLineArgs*/) /*:string*/{
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("{ account:userAccount, amount:xxN }")
    
    //--get_reward_fee_fraction has no arguments, if you add some, uncomment the following line and send the params in this.call/view
    //const fnJSONParams = a.consumeJSON("{ x:0, y:1, z:3 }")
    
    a.noMoreArgs() // no more positional args should remain
    
    return this._view("get_reward_fee_fraction")
    
  }
  
  get_staking_key_HELP(){ return `
   Returns the staking public key
  
  usage:
  > staky get_staking_key 
  `};
  
  get_staking_key(a /*:CommandLineArgs*/) /*:string*/{
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("{ account:userAccount, amount:xxN }")
    
    //--get_staking_key has no arguments, if you add some, uncomment the following line and send the params in this.call/view
    //const fnJSONParams = a.consumeJSON("{ x:0, y:1, z:3 }")
    
    a.noMoreArgs() // no more positional args should remain
    
    return this._view("get_staking_key")
    
  }
  
  is_staking_paused_HELP(){ return `
   Returns true if the staking is paused
  
  usage:
  > staky is_staking_paused 
  `};
  
  is_staking_paused(a /*:CommandLineArgs*/) /*:string*/{
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("{ account:userAccount, amount:xxN }")
    
    //--is_staking_paused has no arguments, if you add some, uncomment the following line and send the params in this.call/view
    //const fnJSONParams = a.consumeJSON("{ x:0, y:1, z:3 }")
    
    a.noMoreArgs() // no more positional args should remain
    
    return this._view("is_staking_paused")
    
  }
  
  get_account_HELP(){ return `
   Returns human readable representation of the account for the given account ID.
  
  usage:
  > staky get_account { account_id: AccountId }
  `};
  
  get_account(a /*:CommandLineArgs*/) /*:string*/{
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("{ account:userAccount, amount:xxN }")
    
    //get fn arguments as JSON
    const fnJSONParams = a.consumeJSON("{ account_id: AccountId }")
    
    a.noMoreArgs() // no more positional args should remain
    
    return this._view("get_account",fnJSONParams)
    
  }
  
  get_number_of_accounts_HELP(){ return `
   Returns the number of accounts that have positive balance on this staking pool.
  
  usage:
  > staky get_number_of_accounts 
  `};
  
  get_number_of_accounts(a /*:CommandLineArgs*/) /*:string*/{
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("{ account:userAccount, amount:xxN }")
    
    //--get_number_of_accounts has no arguments, if you add some, uncomment the following line and send the params in this.call/view
    //const fnJSONParams = a.consumeJSON("{ x:0, y:1, z:3 }")
    
    a.noMoreArgs() // no more positional args should remain
    
    return this._view("get_number_of_accounts")
    
  }
  
  get_accounts_HELP(){ return `
   Returns the list of accounts
  
  usage:
  > staky get_accounts { from_index: u64, limit: u64 }
  `};
  
  get_accounts(a /*:CommandLineArgs*/) /*:string*/{
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("{ account:userAccount, amount:xxN }")
    
    //get fn arguments as JSON
    const fnJSONParams = a.consumeJSON("{ from_index: u64, limit: u64 }")
    
    a.noMoreArgs() // no more positional args should remain
    
    return this._view("get_accounts",fnJSONParams)
    
  }
  
  on_stake_action_HELP(){ return `
  *************
  * Callbacks *
  *************
  
  usage:
  > staky on_stake_action 
  `};
  
  on_stake_action(a /*:CommandLineArgs*/) /*:void*/{
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("{ account:userAccount, amount:xxN }")
    
    //--on_stake_action has no arguments, if you add some, uncomment the following line and send the params in this.call/view
    //const fnJSONParams = a.consumeJSON("{ x:0, y:1, z:3 }")
    
    a.noMoreArgs() // no more positional args should remain
    
    this._call("on_stake_action")
    
  }
  
  update_staking_key_HELP(){ return `
  *******************
  * Owner's methods *
  *******************
   Owner's method.
   Updates current public key to the new given public key.
  
  usage:
  > staky update_staking_key { stake_public_key: Base58PublicKey }
  `};
  
  update_staking_key(a /*:CommandLineArgs*/) /*:void*/{
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("{ account:userAccount, amount:xxN }")
    
    //get fn arguments as JSON
    const fnJSONParams = a.consumeJSON("{ stake_public_key: Base58PublicKey }")
    
    a.noMoreArgs() // no more positional args should remain
    
    this._call("update_staking_key",fnJSONParams)
    
  }
  
  update_reward_fee_fraction_HELP(){ return `
   Owner's method.
   Updates current reward fee fraction to the new given fraction.
  
  usage:
  > staky update_reward_fee_fraction { reward_fee_fraction: RewardFeeFraction }
  `};
  
  update_reward_fee_fraction(a /*:CommandLineArgs*/) /*:void*/{
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("{ account:userAccount, amount:xxN }")
    
    //get fn arguments as JSON
    const fnJSONParams = a.consumeJSON("{ reward_fee_fraction: RewardFeeFraction }")
    
    a.noMoreArgs() // no more positional args should remain
    
    this._call("update_reward_fee_fraction",fnJSONParams)
    
  }
  
  vote_HELP(){ return `
   Owner's method.
   Calls 'vote(is_vote)' on the given voting contract account ID on behalf of the pool.
  
  usage:
  > staky vote { voting_account_id: AccountId, is_vote: bool }
  `};
  
  vote(a /*:CommandLineArgs*/) /*:void*/{
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("{ account:userAccount, amount:xxN }")
    
    //get fn arguments as JSON
    const fnJSONParams = a.consumeJSON("{ voting_account_id: AccountId, is_vote: bool }")
    
    a.noMoreArgs() // no more positional args should remain
    
    this._call("vote",fnJSONParams)
    
  }
  
  pause_staking_HELP(){ return `
   Owner's method.
   Pauses pool staking.
  
  usage:
  > staky pause_staking 
  `};
  
  pause_staking(a /*:CommandLineArgs*/) /*:void*/{
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("{ account:userAccount, amount:xxN }")
    
    //--pause_staking has no arguments, if you add some, uncomment the following line and send the params in this.call/view
    //const fnJSONParams = a.consumeJSON("{ x:0, y:1, z:3 }")
    
    a.noMoreArgs() // no more positional args should remain
    
    this._call("pause_staking")
    
  }
  
  resume_staking_HELP(){ return `
   Owner's method.
   Resumes pool staking.
  
  usage:
  > staky resume_staking 
  `};
  
  resume_staking(a /*:CommandLineArgs*/) /*:void*/{
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("{ account:userAccount, amount:xxN }")
    
    //--resume_staking has no arguments, if you add some, uncomment the following line and send the params in this.call/view
    //const fnJSONParams = a.consumeJSON("{ x:0, y:1, z:3 }")
    
    a.noMoreArgs() // no more positional args should remain
    
    this._call("resume_staking")
    
  }
  
}
module.exports = ContractAPI;

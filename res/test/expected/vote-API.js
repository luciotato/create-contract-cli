
// ----------------------------------------------
// generated by create-contract-cli from ./res/test/rust/voting/src/lib.rs
// ---------------------------------------------
            
import { spawnNearCli } from "./util/SpawnNearCli.js"
import { CommandLineArgs } from "./util/CommandLineArgs.js"
import { options } from "./CLIOptions.js"

//name of this script
export const nickname = 'vote'

//one function for each pub fn in the contract
//get parameters by consuming from CommandLineParser
export class ContractAPI {
        
  new_help =`
  #[init]
  
  usage:
  > vote new 
  `;
  
  new(a /*:CommandLineArgs*/) {
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("JSON params")
    
    //--new has no arguments, if you add some, uncomment the following line
    //const fnJSONparams = a.consumeJSON("{ x:0, y:1, z:3 }")
    
    a.noMoreArgs() // no more positional args should remain
    
    const nearCliArgs = [
      "call",
      options.contractName.value,
      "new",
    ]
    
    a.addOptionsTo(nearCliArgs); //add any other --options found the command line
    
    spawnNearCli(nearCliArgs);
    
  }
  
  ping_help =`
   Ping to update the votes according to current stake of validators.
  
  usage:
  > vote ping 
  `;
  
  ping(a /*:CommandLineArgs*/) {
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("JSON params")
    
    //--ping has no arguments, if you add some, uncomment the following line
    //const fnJSONparams = a.consumeJSON("{ x:0, y:1, z:3 }")
    
    a.noMoreArgs() // no more positional args should remain
    
    const nearCliArgs = [
      "call",
      options.contractName.value,
      "ping",
    ]
    
    a.addOptionsTo(nearCliArgs); //add any other --options found the command line
    
    spawnNearCli(nearCliArgs);
    
  }
  
  vote_help =`
   Method for validators to vote or withdraw the vote.
   Votes for if 'is_vote' is true, or withdraws the vote if 'is_vote' is false.
  
  usage:
  > vote vote { is_vote: bool }
  `;
  
  vote(a /*:CommandLineArgs*/) {
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("JSON params")
    
    //get fn arguments as JSON
    const fnJSONparams = a.consumeJSON("{ is_vote: bool }")
    
    a.noMoreArgs() // no more positional args should remain
    
    const nearCliArgs = [
      "call",
      options.contractName.value,
      "vote",
      fnJSONparams,
    ]
    
    a.addOptionsTo(nearCliArgs); //add any other --options found the command line
    
    spawnNearCli(nearCliArgs);
    
  }
  
  get_result_help =`
   Get the timestamp of when the voting finishes. 'None' means the voting hasn't ended yet.
  
  usage:
  > vote get_result 
  `;
  
  get_result(a /*:CommandLineArgs*/) {
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("JSON params")
    
    //--get_result has no arguments, if you add some, uncomment the following line
    //const fnJSONparams = a.consumeJSON("{ x:0, y:1, z:3 }")
    
    a.noMoreArgs() // no more positional args should remain
    
    const nearCliArgs = [
      "view",
      options.contractName.value,
      "get_result",
    ]
    
    a.addOptionsTo(nearCliArgs); //add any other --options found the command line
    
    spawnNearCli(nearCliArgs);
    
  }
  
  get_total_voted_stake_help =`
   Returns current a pair of 'total_voted_stake' and the total stake.
   Note: as a view method, it doesn't recompute the active stake. May need to call 'ping' to
   update the active stake.
  
  usage:
  > vote get_total_voted_stake 
  `;
  
  get_total_voted_stake(a /*:CommandLineArgs*/) {
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("JSON params")
    
    //--get_total_voted_stake has no arguments, if you add some, uncomment the following line
    //const fnJSONparams = a.consumeJSON("{ x:0, y:1, z:3 }")
    
    a.noMoreArgs() // no more positional args should remain
    
    const nearCliArgs = [
      "view",
      options.contractName.value,
      "get_total_voted_stake",
    ]
    
    a.addOptionsTo(nearCliArgs); //add any other --options found the command line
    
    spawnNearCli(nearCliArgs);
    
  }
  
  get_votes_help =`
   Returns all active votes.
   Note: as a view method, it doesn't recompute the active stake. May need to call 'ping' to
   update the active stake.
  
  usage:
  > vote get_votes 
  `;
  
  get_votes(a /*:CommandLineArgs*/) {
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("JSON params")
    
    //--get_votes has no arguments, if you add some, uncomment the following line
    //const fnJSONparams = a.consumeJSON("{ x:0, y:1, z:3 }")
    
    a.noMoreArgs() // no more positional args should remain
    
    const nearCliArgs = [
      "view",
      options.contractName.value,
      "get_votes",
    ]
    
    a.addOptionsTo(nearCliArgs); //add any other --options found the command line
    
    spawnNearCli(nearCliArgs);
    
  }
  
}

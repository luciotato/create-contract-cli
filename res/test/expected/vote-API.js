
    // ----------------------------------------------
    // generated by create-contract-cli from ./res/test/rust/voting/src/lib.rs
    // ---------------------------------------------

    const color = require("./util/color.js");
    const nearCli = require("./util/SpawnNearCli.js");
    const options = require("./CLIOptions.js");
    const cliConfig = require("./CLIConfig.js");

    // name of this script
    const nickname = cliConfig.nickname;

    // one function for each pub fn in the contract
    // get parameters by consuming from CommandLineParser
    class ContractAPI {

        // this.view helper function
        view(command/*:string*/, fnJSONParams/*?:any*/) /*:string*/ {
            return nearCli.view(cliConfig.contractAccount, command, fnJSONParams, options)
        }
        // this.call helper function
        call(command/*:string*/, fnJSONParams/*?:any*/) /*:string*/ {
            return nearCli.call(cliConfig.contractAccount, command, fnJSONParams, options)
        }
    
    
  new_HELP(){ return `
  #[init]
  
  usage:
  > vote new 
  `};
  
  new(a /*:CommandLineArgs*/) /*:void*/{
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("{ account:userAccount, amount:xxN }")
    
    //--new has no arguments, if you add some, uncomment the following line and send the params in this.call/view
    //const fnJSONParams = a.consumeJSON("{ x:0, y:1, z:3 }")
    
    a.noMoreArgs() // no more positional args should remain
    
    this.call("new")
    
  }
  
  ping_HELP(){ return `
   Ping to update the votes according to current stake of validators.
  
  usage:
  > vote ping 
  `};
  
  ping(a /*:CommandLineArgs*/) /*:void*/{
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("{ account:userAccount, amount:xxN }")
    
    //--ping has no arguments, if you add some, uncomment the following line and send the params in this.call/view
    //const fnJSONParams = a.consumeJSON("{ x:0, y:1, z:3 }")
    
    a.noMoreArgs() // no more positional args should remain
    
    this.call("ping")
    
  }
  
  vote_HELP(){ return `
   Method for validators to vote or withdraw the vote.
   Votes for if 'is_vote' is true, or withdraws the vote if 'is_vote' is false.
  
  usage:
  > vote vote { is_vote: bool }
  `};
  
  vote(a /*:CommandLineArgs*/) /*:void*/{
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("{ account:userAccount, amount:xxN }")
    
    //get fn arguments as JSON
    const fnJSONParams = a.consumeJSON("{ is_vote: bool }")
    
    a.noMoreArgs() // no more positional args should remain
    
    this.call("vote",fnJSONParams)
    
  }
  
  get_result_HELP(){ return `
   Get the timestamp of when the voting finishes. 'None' means the voting hasn't ended yet.
  
  usage:
  > vote get_result 
  `};
  
  get_result(a /*:CommandLineArgs*/) /*:string*/{
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("{ account:userAccount, amount:xxN }")
    
    //--get_result has no arguments, if you add some, uncomment the following line and send the params in this.call/view
    //const fnJSONParams = a.consumeJSON("{ x:0, y:1, z:3 }")
    
    a.noMoreArgs() // no more positional args should remain
    
    return this.view("get_result")
    
  }
  
  get_total_voted_stake_HELP(){ return `
   Returns current a pair of 'total_voted_stake' and the total stake.
   Note: as a view method, it doesn't recompute the active stake. May need to call 'ping' to
   update the active stake.
  
  usage:
  > vote get_total_voted_stake 
  `};
  
  get_total_voted_stake(a /*:CommandLineArgs*/) /*:string*/{
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("{ account:userAccount, amount:xxN }")
    
    //--get_total_voted_stake has no arguments, if you add some, uncomment the following line and send the params in this.call/view
    //const fnJSONParams = a.consumeJSON("{ x:0, y:1, z:3 }")
    
    a.noMoreArgs() // no more positional args should remain
    
    return this.view("get_total_voted_stake")
    
  }
  
  get_votes_HELP(){ return `
   Returns all active votes.
   Note: as a view method, it doesn't recompute the active stake. May need to call 'ping' to
   update the active stake.
  
  usage:
  > vote get_votes 
  `};
  
  get_votes(a /*:CommandLineArgs*/) /*:string*/{
    
    //--these are some examples on how to consume arguments
    //const toAccount = a.consumeString("to Account")
    //const argumentJson = a.consumeJSON("{ account:userAccount, amount:xxN }")
    
    //--get_votes has no arguments, if you add some, uncomment the following line and send the params in this.call/view
    //const fnJSONParams = a.consumeJSON("{ x:0, y:1, z:3 }")
    
    a.noMoreArgs() // no more positional args should remain
    
    return this.view("get_votes")
    
  }
  
}
module.exports = ContractAPI;

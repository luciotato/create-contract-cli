
// ----------------------------------------------
// generated by create-contract-cli from res\test\rust\NEARSwap\src\lib.rs
// ---------------------------------------------

import { spawnNearCli } from "./util/SpawnNearCli.js"
import { CommandLineArgs } from "./util/CommandLineArgs.js"
import { commonCliOptions } from "./util/CommonCLIOptions.js"

// name of this script
export const nickname = 'swap'
// account id where this contrat is deployed
export const defaultContractName = 'nearswap.testnet'

// one function for each pub fn in the contract
// get parameters by consuming from CommandLineParser
export class ContractAPI {
  new_help =`
  #[init]
  
  usage:
  > swap new `;

  new (a /*: CommandLineArgs */) {
      // consume contract name from options if present
      const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName

      // --these are some examples on how to consume arguments
      // const argument = a.consumeString("api argument")
      // const argumentJson = a.consumeJSON("JSON argument")

      // --new has no arguments, if you add some, uncomment the following line
      // const params = a.consumeJSON("{ x:0, y:1, z:3 }")

      a.noMoreArgs() // end of arguments

      const nearCliArgs = [
          "view",
          contract,
          "new"
      ]

      a.addOptionsTo(nearCliArgs) // add any other --options found the command line

      spawnNearCli(nearCliArgs)
  }

  set_fee_dst_help =`
  
  usage:
  > swap set_fee_dst { fee_dst: AccountId }`;

  set_fee_dst (a /*: CommandLineArgs */) {
      // consume contract name from options if present
      const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName

      // --these are some examples on how to consume arguments
      // const argument = a.consumeString("api argument")
      // const argumentJson = a.consumeJSON("JSON argument")

      // get fn arguments as JSON
      const params = a.consumeJSON("{ fee_dst: AccountId }")

      a.noMoreArgs() // end of arguments

      const nearCliArgs = [
          "call",
          contract,
          "set_fee_dst",
          JSON.stringify(params)
      ]

      a.addOptionsTo(nearCliArgs) // add any other --options found the command line

      spawnNearCli(nearCliArgs)
  }

  change_owner_help =`
   Owner is an account (can be a multisig) who has management rights to update
   fee size.
  
  usage:
  > swap change_owner { new_owner: AccountId }`;

  change_owner (a /*: CommandLineArgs */) {
      // consume contract name from options if present
      const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName

      // --these are some examples on how to consume arguments
      // const argument = a.consumeString("api argument")
      // const argumentJson = a.consumeJSON("JSON argument")

      // get fn arguments as JSON
      const params = a.consumeJSON("{ new_owner: AccountId }")

      a.noMoreArgs() // end of arguments

      const nearCliArgs = [
          "call",
          contract,
          "change_owner",
          JSON.stringify(params)
      ]

      a.addOptionsTo(nearCliArgs) // add any other --options found the command line

      spawnNearCli(nearCliArgs)
  }

  check_number_help =`
  **********************
       POOL MANAGEMENT
    **********************/
  #[payable]
  
  usage:
  > swap check_number { a: u128, aj: U128, b: Balance }`;

  check_number (a /*: CommandLineArgs */) {
      // consume contract name from options if present
      const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName

      // function is #payable, --amount option is required
      // IMPORTANT! manually check if the function requires YOCTONEAR and change the 2nd param to 'Y'
      a.requireOptionWithAmount(commonCliOptions.amount, 'N') // contract require an amount in expressed in N=NEARS, Y=YoctoNears
      // --these are some examples on how to consume arguments
      // const argument = a.consumeString("api argument")
      // const argumentJson = a.consumeJSON("JSON argument")

      // get fn arguments as JSON
      const params = a.consumeJSON("{ a: u128, aj: U128, b: Balance }")

      a.noMoreArgs() // end of arguments

      const nearCliArgs = [
          "call",
          contract,
          "check_number",
          JSON.stringify(params)
      ]

      a.addOptionsTo(nearCliArgs) // add any other --options found the command line

      spawnNearCli(nearCliArgs)
  }

  create_pool_help =`
   Allows any user to creat a new near-token pool. Each pool is identified by the 'token'
   account - which we call the Pool Reserve Token.
   If a pool for give token exists then "E1" assert exception is thrown.
   TODO: charge user for a storage created!
  #[payable]
  
  usage:
  > swap create_pool { token: AccountId }`;

  create_pool (a /*: CommandLineArgs */) {
      // consume contract name from options if present
      const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName

      // function is #payable, --amount option is required
      // IMPORTANT! manually check if the function requires YOCTONEAR and change the 2nd param to 'Y'
      a.requireOptionWithAmount(commonCliOptions.amount, 'N') // contract require an amount in expressed in N=NEARS, Y=YoctoNears
      // --these are some examples on how to consume arguments
      // const argument = a.consumeString("api argument")
      // const argumentJson = a.consumeJSON("JSON argument")

      // get fn arguments as JSON
      const params = a.consumeJSON("{ token: AccountId }")

      a.noMoreArgs() // end of arguments

      const nearCliArgs = [
          "call",
          contract,
          "create_pool",
          JSON.stringify(params)
      ]

      a.addOptionsTo(nearCliArgs) // add any other --options found the command line

      spawnNearCli(nearCliArgs)
  }

  pool_info_help =`
   Extracts public information of the 'token' pool.
  
  usage:
  > swap pool_info { token: AccountId }`;

  pool_info (a /*: CommandLineArgs */) {
      // consume contract name from options if present
      const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName

      // --these are some examples on how to consume arguments
      // const argument = a.consumeString("api argument")
      // const argumentJson = a.consumeJSON("JSON argument")

      // get fn arguments as JSON
      const params = a.consumeJSON("{ token: AccountId }")

      a.noMoreArgs() // end of arguments

      const nearCliArgs = [
          "view",
          contract,
          "pool_info",
          JSON.stringify(params)
      ]

      a.addOptionsTo(nearCliArgs) // add any other --options found the command line

      spawnNearCli(nearCliArgs)
  }

  list_pools_help =`
   Returns list of pools identified as their reserve token AccountId.
  
  usage:
  > swap list_pools `;

  list_pools (a /*: CommandLineArgs */) {
      // consume contract name from options if present
      const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName

      // --these are some examples on how to consume arguments
      // const argument = a.consumeString("api argument")
      // const argumentJson = a.consumeJSON("JSON argument")

      // --list_pools has no arguments, if you add some, uncomment the following line
      // const params = a.consumeJSON("{ x:0, y:1, z:3 }")

      a.noMoreArgs() // end of arguments

      const nearCliArgs = [
          "view",
          contract,
          "list_pools"
      ]

      a.addOptionsTo(nearCliArgs) // add any other --options found the command line

      spawnNearCli(nearCliArgs)
  }

  add_liquidity_help =`
   Increases Near and the Reserve token liquidity.
   The supplied funds must preserve current ratio of the liquidity pool.
  #[payable]
  
  usage:
  > swap add_liquidity { token: AccountId, max_tokens: U128, min_shares: U128 }`;

  add_liquidity (a /*: CommandLineArgs */) {
      // consume contract name from options if present
      const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName

      // function is #payable, --amount option is required
      // IMPORTANT! manually check if the function requires YOCTONEAR and change the 2nd param to 'Y'
      a.requireOptionWithAmount(commonCliOptions.amount, 'N') // contract require an amount in expressed in N=NEARS, Y=YoctoNears
      // --these are some examples on how to consume arguments
      // const argument = a.consumeString("api argument")
      // const argumentJson = a.consumeJSON("JSON argument")

      // get fn arguments as JSON
      const params = a.consumeJSON("{ token: AccountId, max_tokens: U128, min_shares: U128 }")

      a.noMoreArgs() // end of arguments

      const nearCliArgs = [
          "call",
          contract,
          "add_liquidity",
          JSON.stringify(params)
      ]

      a.addOptionsTo(nearCliArgs) // add any other --options found the command line

      spawnNearCli(nearCliArgs)
  }

  withdraw_liquidity_help =`
   Redeems 'shares' for liquidity stored in this pool with condition of getting at least
   'min_ynear' of Near and 'min_tokens' of reserve tokens ('token'). Shares are note
   exchengable between different pools.
  
  usage:
  > swap withdraw_liquidity { token: AccountId, shares: U128, min_ynear: U128, min_tokens: U128 }`;

  withdraw_liquidity (a /*: CommandLineArgs */) {
      // consume contract name from options if present
      const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName

      // --these are some examples on how to consume arguments
      // const argument = a.consumeString("api argument")
      // const argumentJson = a.consumeJSON("JSON argument")

      // get fn arguments as JSON
      const params = a.consumeJSON("{ token: AccountId, shares: U128, min_ynear: U128, min_tokens: U128 }")

      a.noMoreArgs() // end of arguments

      const nearCliArgs = [
          "call",
          contract,
          "withdraw_liquidity",
          JSON.stringify(params)
      ]

      a.addOptionsTo(nearCliArgs) // add any other --options found the command line

      spawnNearCli(nearCliArgs)
  }

  shares_balance_of_help =`
   Returns the owner balance of shares of a pool identified by token.
  
  usage:
  > swap shares_balance_of { token: AccountId, owner: AccountId }`;

  shares_balance_of (a /*: CommandLineArgs */) {
      // consume contract name from options if present
      const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName

      // --these are some examples on how to consume arguments
      // const argument = a.consumeString("api argument")
      // const argumentJson = a.consumeJSON("JSON argument")

      // get fn arguments as JSON
      const params = a.consumeJSON("{ token: AccountId, owner: AccountId }")

      a.noMoreArgs() // end of arguments

      const nearCliArgs = [
          "view",
          contract,
          "shares_balance_of",
          JSON.stringify(params)
      ]

      a.addOptionsTo(nearCliArgs) // add any other --options found the command line

      spawnNearCli(nearCliArgs)
  }

  swap_near_to_token_exact_in_help =`
  **********************
    CLP market functions
    **********************/
   Swaps NEAR to 'token' and transfers the reserve tokens to the caller.
   Caller attaches near tokens he wants to swap to the transacion under a condition of
   receving at least 'min_tokens' of 'token'.
  #[payable]
  
  usage:
  > swap swap_near_to_token_exact_in { token: AccountId, min_tokens: U128 }`;

  swap_near_to_token_exact_in (a /*: CommandLineArgs */) {
      // consume contract name from options if present
      const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName

      // function is #payable, --amount option is required
      // IMPORTANT! manually check if the function requires YOCTONEAR and change the 2nd param to 'Y'
      a.requireOptionWithAmount(commonCliOptions.amount, 'N') // contract require an amount in expressed in N=NEARS, Y=YoctoNears
      // --these are some examples on how to consume arguments
      // const argument = a.consumeString("api argument")
      // const argumentJson = a.consumeJSON("JSON argument")

      // get fn arguments as JSON
      const params = a.consumeJSON("{ token: AccountId, min_tokens: U128 }")

      a.noMoreArgs() // end of arguments

      const nearCliArgs = [
          "call",
          contract,
          "swap_near_to_token_exact_in",
          JSON.stringify(params)
      ]

      a.addOptionsTo(nearCliArgs) // add any other --options found the command line

      spawnNearCli(nearCliArgs)
  }

  swap_near_to_token_exact_in_xfr_help =`
   Same as 'swap_near_to_token_exact_in', but user additionly specifies the 'recipient'
   who will receive the tokens after the swap.
  #[payable]
  
  usage:
  > swap swap_near_to_token_exact_in_xfr { token: AccountId, min_tokens: U128, recipient: AccountId }`;

  swap_near_to_token_exact_in_xfr (a /*: CommandLineArgs */) {
      // consume contract name from options if present
      const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName

      // function is #payable, --amount option is required
      // IMPORTANT! manually check if the function requires YOCTONEAR and change the 2nd param to 'Y'
      a.requireOptionWithAmount(commonCliOptions.amount, 'N') // contract require an amount in expressed in N=NEARS, Y=YoctoNears
      // --these are some examples on how to consume arguments
      // const argument = a.consumeString("api argument")
      // const argumentJson = a.consumeJSON("JSON argument")

      // get fn arguments as JSON
      const params = a.consumeJSON("{ token: AccountId, min_tokens: U128, recipient: AccountId }")

      a.noMoreArgs() // end of arguments

      const nearCliArgs = [
          "call",
          contract,
          "swap_near_to_token_exact_in_xfr",
          JSON.stringify(params)
      ]

      a.addOptionsTo(nearCliArgs) // add any other --options found the command line

      spawnNearCli(nearCliArgs)
  }

  swap_near_to_token_exact_out_help =`
   Swaps NEAR to 'token' and transfers the reserve tokens to the caller.
   Caller attaches maximum amount of NEAR he is willing to swap to receive 'tokens_out'
   of 'token' wants to swap to the transacion. Surplus of NEAR tokens will be returned.
   Transaction will panic if the caller doesn't attach enough NEAR tokens.
  #[payable]
  
  usage:
  > swap swap_near_to_token_exact_out { token: AccountId, tokens_out: U128 }`;

  swap_near_to_token_exact_out (a /*: CommandLineArgs */) {
      // consume contract name from options if present
      const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName

      // function is #payable, --amount option is required
      // IMPORTANT! manually check if the function requires YOCTONEAR and change the 2nd param to 'Y'
      a.requireOptionWithAmount(commonCliOptions.amount, 'N') // contract require an amount in expressed in N=NEARS, Y=YoctoNears
      // --these are some examples on how to consume arguments
      // const argument = a.consumeString("api argument")
      // const argumentJson = a.consumeJSON("JSON argument")

      // get fn arguments as JSON
      const params = a.consumeJSON("{ token: AccountId, tokens_out: U128 }")

      a.noMoreArgs() // end of arguments

      const nearCliArgs = [
          "call",
          contract,
          "swap_near_to_token_exact_out",
          JSON.stringify(params)
      ]

      a.addOptionsTo(nearCliArgs) // add any other --options found the command line

      spawnNearCli(nearCliArgs)
  }

  swap_near_to_token_exact_out_xfr_help =`
   Same as 'swap_near_to_token_exact_out', but user additionly specifies the 'recipient'
   who will receive the reserve tokens after the swap.
  #[payable]
  
  usage:
  > swap swap_near_to_token_exact_out_xfr { token: AccountId, tokens_out: U128, recipient: AccountId }`;

  swap_near_to_token_exact_out_xfr (a /*: CommandLineArgs */) {
      // consume contract name from options if present
      const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName

      // function is #payable, --amount option is required
      // IMPORTANT! manually check if the function requires YOCTONEAR and change the 2nd param to 'Y'
      a.requireOptionWithAmount(commonCliOptions.amount, 'N') // contract require an amount in expressed in N=NEARS, Y=YoctoNears
      // --these are some examples on how to consume arguments
      // const argument = a.consumeString("api argument")
      // const argumentJson = a.consumeJSON("JSON argument")

      // get fn arguments as JSON
      const params = a.consumeJSON("{ token: AccountId, tokens_out: U128, recipient: AccountId }")

      a.noMoreArgs() // end of arguments

      const nearCliArgs = [
          "call",
          contract,
          "swap_near_to_token_exact_out_xfr",
          JSON.stringify(params)
      ]

      a.addOptionsTo(nearCliArgs) // add any other --options found the command line

      spawnNearCli(nearCliArgs)
  }

  swap_token_to_near_exact_in_help =`
   Swaps 'tokens_paid' of 'token' to NEAR and transfers NEAR to the caller under a
   condition of receving at least 'min_ynear' yocto NEARs.
   Preceeding to this transaction, caller has to create sufficient allowance of 'token'
   for this contract (at least 'tokens_paid').
   TODO: Transaction will panic if a caller doesn't provide enough allowance.
  #[payable]
  
  usage:
  > swap swap_token_to_near_exact_in { token: AccountId, tokens_paid: U128, min_ynear: U128 }`;

  swap_token_to_near_exact_in (a /*: CommandLineArgs */) {
      // consume contract name from options if present
      const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName

      // function is #payable, --amount option is required
      // IMPORTANT! manually check if the function requires YOCTONEAR and change the 2nd param to 'Y'
      a.requireOptionWithAmount(commonCliOptions.amount, 'N') // contract require an amount in expressed in N=NEARS, Y=YoctoNears
      // --these are some examples on how to consume arguments
      // const argument = a.consumeString("api argument")
      // const argumentJson = a.consumeJSON("JSON argument")

      // get fn arguments as JSON
      const params = a.consumeJSON("{ token: AccountId, tokens_paid: U128, min_ynear: U128 }")

      a.noMoreArgs() // end of arguments

      const nearCliArgs = [
          "call",
          contract,
          "swap_token_to_near_exact_in",
          JSON.stringify(params)
      ]

      a.addOptionsTo(nearCliArgs) // add any other --options found the command line

      spawnNearCli(nearCliArgs)
  }

  swap_token_to_near_exact_in_xfr_help =`
   Same as 'swap_token_to_near_exact_in', but user additionly specifies the 'recipient'
   who will receive the tokens after the swap.
  #[payable]
  
  usage:
  > swap swap_token_to_near_exact_in_xfr { token: AccountId, tokens_paid: U128, min_ynear: U128, recipient: AccountId }`;

  swap_token_to_near_exact_in_xfr (a /*: CommandLineArgs */) {
      // consume contract name from options if present
      const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName

      // function is #payable, --amount option is required
      // IMPORTANT! manually check if the function requires YOCTONEAR and change the 2nd param to 'Y'
      a.requireOptionWithAmount(commonCliOptions.amount, 'N') // contract require an amount in expressed in N=NEARS, Y=YoctoNears
      // --these are some examples on how to consume arguments
      // const argument = a.consumeString("api argument")
      // const argumentJson = a.consumeJSON("JSON argument")

      // get fn arguments as JSON
      const params = a.consumeJSON("{ token: AccountId, tokens_paid: U128, min_ynear: U128, recipient: AccountId }")

      a.noMoreArgs() // end of arguments

      const nearCliArgs = [
          "call",
          contract,
          "swap_token_to_near_exact_in_xfr",
          JSON.stringify(params)
      ]

      a.addOptionsTo(nearCliArgs) // add any other --options found the command line

      spawnNearCli(nearCliArgs)
  }

  swap_token_to_near_exact_out_help =`
   Swaps 'token' to NEAR and transfers NEAR to the caller.
   Caller defines the amount of NEAR he wants to receive under a condition of not spending
   more than 'max_tokens' of 'token'.
   Preceeding to this transaction, caller has to create sufficient allowance of 'token'
   for this contract.
   TODO: Transaction will panic if a caller doesn't provide enough allowance.
  
  usage:
  > swap swap_token_to_near_exact_out { token: AccountId, ynear_out: U128, max_tokens: U128 }`;

  swap_token_to_near_exact_out (a /*: CommandLineArgs */) {
      // consume contract name from options if present
      const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName

      // --these are some examples on how to consume arguments
      // const argument = a.consumeString("api argument")
      // const argumentJson = a.consumeJSON("JSON argument")

      // get fn arguments as JSON
      const params = a.consumeJSON("{ token: AccountId, ynear_out: U128, max_tokens: U128 }")

      a.noMoreArgs() // end of arguments

      const nearCliArgs = [
          "call",
          contract,
          "swap_token_to_near_exact_out",
          JSON.stringify(params)
      ]

      a.addOptionsTo(nearCliArgs) // add any other --options found the command line

      spawnNearCli(nearCliArgs)
  }

  swap_token_to_near_exact_out_xfr_help =`
   Same as 'swap_token_to_near_exact_out', but user additionly specifies the 'recipient'
   who will receive the tokens after the swap.
  
  usage:
  > swap swap_token_to_near_exact_out_xfr { token: AccountId, ynear_out: U128, max_tokens: U128, recipient: AccountId }`;

  swap_token_to_near_exact_out_xfr (a /*: CommandLineArgs */) {
      // consume contract name from options if present
      const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName

      // --these are some examples on how to consume arguments
      // const argument = a.consumeString("api argument")
      // const argumentJson = a.consumeJSON("JSON argument")

      // get fn arguments as JSON
      const params = a.consumeJSON("{ token: AccountId, ynear_out: U128, max_tokens: U128, recipient: AccountId }")

      a.noMoreArgs() // end of arguments

      const nearCliArgs = [
          "call",
          contract,
          "swap_token_to_near_exact_out_xfr",
          JSON.stringify(params)
      ]

      a.addOptionsTo(nearCliArgs) // add any other --options found the command line

      spawnNearCli(nearCliArgs)
  }

  swap_tokens_exact_in_help =`
   Swaps two different tokens.
   Caller defines the amount of tokens he wants to swap under a condition of
   receving at least 'min_to_tokens'.
   Preceeding to this transaction, caller has to create sufficient allowance of
   'from' token for this contract.
   TODO: Transaction will panic if a caller doesn't provide enough allowance.
  
  usage:
  > swap swap_tokens_exact_in { from: AccountId, to: AccountId, from_tokens: U128, min_to_tokens: U128 }`;

  swap_tokens_exact_in (a /*: CommandLineArgs */) {
      // consume contract name from options if present
      const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName

      // --these are some examples on how to consume arguments
      // const argument = a.consumeString("api argument")
      // const argumentJson = a.consumeJSON("JSON argument")

      // get fn arguments as JSON
      const params = a.consumeJSON("{ from: AccountId, to: AccountId, from_tokens: U128, min_to_tokens: U128 }")

      a.noMoreArgs() // end of arguments

      const nearCliArgs = [
          "call",
          contract,
          "swap_tokens_exact_in",
          JSON.stringify(params)
      ]

      a.addOptionsTo(nearCliArgs) // add any other --options found the command line

      spawnNearCli(nearCliArgs)
  }

  swap_tokens_exact_in_xfr_help =`
   Same as 'swap_tokens_exact_in', but user additionly specifies the 'recipient'
   who will receive the tokens after the swap.
  
  usage:
  > swap swap_tokens_exact_in_xfr { from: AccountId, to: AccountId, from_tokens: U128, min_to_tokens: U128, recipient: AccountId }`;

  swap_tokens_exact_in_xfr (a /*: CommandLineArgs */) {
      // consume contract name from options if present
      const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName

      // --these are some examples on how to consume arguments
      // const argument = a.consumeString("api argument")
      // const argumentJson = a.consumeJSON("JSON argument")

      // get fn arguments as JSON
      const params = a.consumeJSON("{ from: AccountId, to: AccountId, from_tokens: U128, min_to_tokens: U128, recipient: AccountId }")

      a.noMoreArgs() // end of arguments

      const nearCliArgs = [
          "call",
          contract,
          "swap_tokens_exact_in_xfr",
          JSON.stringify(params)
      ]

      a.addOptionsTo(nearCliArgs) // add any other --options found the command line

      spawnNearCli(nearCliArgs)
  }

  swap_tokens_exact_out_help =`
   Swaps two different tokens.
   Caller defines the amount of tokens he wants to receive under a of not spending
   more than 'max_from_tokens'.
   Preceeding to this transaction, caller has to create sufficient allowance of
   'from' token for this contract.
   TODO: Transaction will panic if a caller doesn't provide enough allowance.
  
  usage:
  > swap swap_tokens_exact_out { from: AccountId, to: AccountId, to_tokens: U128, max_from_tokens: U128 }`;

  swap_tokens_exact_out (a /*: CommandLineArgs */) {
      // consume contract name from options if present
      const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName

      // --these are some examples on how to consume arguments
      // const argument = a.consumeString("api argument")
      // const argumentJson = a.consumeJSON("JSON argument")

      // get fn arguments as JSON
      const params = a.consumeJSON("{ from: AccountId, to: AccountId, to_tokens: U128, max_from_tokens: U128 }")

      a.noMoreArgs() // end of arguments

      const nearCliArgs = [
          "call",
          contract,
          "swap_tokens_exact_out",
          JSON.stringify(params)
      ]

      a.addOptionsTo(nearCliArgs) // add any other --options found the command line

      spawnNearCli(nearCliArgs)
  }

  swap_tokens_exact_out_xfr_help =`
   Same as 'swap_tokens_exact_out', but user additionly specifies the 'recipient'
   who will receive the tokens after the swap.
  
  usage:
  > swap swap_tokens_exact_out_xfr { from: AccountId, to: AccountId, to_tokens: U128, max_from_tokens: U128, recipient: AccountId }`;

  swap_tokens_exact_out_xfr (a /*: CommandLineArgs */) {
      // consume contract name from options if present
      const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName

      // --these are some examples on how to consume arguments
      // const argument = a.consumeString("api argument")
      // const argumentJson = a.consumeJSON("JSON argument")

      // get fn arguments as JSON
      const params = a.consumeJSON("{ from: AccountId, to: AccountId, to_tokens: U128, max_from_tokens: U128, recipient: AccountId }")

      a.noMoreArgs() // end of arguments

      const nearCliArgs = [
          "call",
          contract,
          "swap_tokens_exact_out_xfr",
          JSON.stringify(params)
      ]

      a.addOptionsTo(nearCliArgs) // add any other --options found the command line

      spawnNearCli(nearCliArgs)
  }

  price_near_to_token_in_help =`
   Calculates amount of tokens user will recieve when swapping 'ynear_in' for 'token'
   assets
  
  usage:
  > swap price_near_to_token_in { token: AccountId, ynear_in: U128 }`;

  price_near_to_token_in (a /*: CommandLineArgs */) {
      // consume contract name from options if present
      const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName

      // --these are some examples on how to consume arguments
      // const argument = a.consumeString("api argument")
      // const argumentJson = a.consumeJSON("JSON argument")

      // get fn arguments as JSON
      const params = a.consumeJSON("{ token: AccountId, ynear_in: U128 }")

      a.noMoreArgs() // end of arguments

      const nearCliArgs = [
          "view",
          contract,
          "price_near_to_token_in",
          JSON.stringify(params)
      ]

      a.addOptionsTo(nearCliArgs) // add any other --options found the command line

      spawnNearCli(nearCliArgs)
  }

  price_near_to_token_out_help =`
   Calculates amount of NEAR user will need to swap if he wants to receive
   'tokens_out' of 'token'
  
  usage:
  > swap price_near_to_token_out { token: AccountId, tokens_out: U128 }`;

  price_near_to_token_out (a /*: CommandLineArgs */) {
      // consume contract name from options if present
      const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName

      // --these are some examples on how to consume arguments
      // const argument = a.consumeString("api argument")
      // const argumentJson = a.consumeJSON("JSON argument")

      // get fn arguments as JSON
      const params = a.consumeJSON("{ token: AccountId, tokens_out: U128 }")

      a.noMoreArgs() // end of arguments

      const nearCliArgs = [
          "view",
          contract,
          "price_near_to_token_out",
          JSON.stringify(params)
      ]

      a.addOptionsTo(nearCliArgs) // add any other --options found the command line

      spawnNearCli(nearCliArgs)
  }

  price_token_to_near_in_help =`
   Calculates amount of NEAR user will recieve when swapping 'tokens_in' for NEAR.
  
  usage:
  > swap price_token_to_near_in { token: AccountId, tokens_in: U128 }`;

  price_token_to_near_in (a /*: CommandLineArgs */) {
      // consume contract name from options if present
      const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName

      // --these are some examples on how to consume arguments
      // const argument = a.consumeString("api argument")
      // const argumentJson = a.consumeJSON("JSON argument")

      // get fn arguments as JSON
      const params = a.consumeJSON("{ token: AccountId, tokens_in: U128 }")

      a.noMoreArgs() // end of arguments

      const nearCliArgs = [
          "view",
          contract,
          "price_token_to_near_in",
          JSON.stringify(params)
      ]

      a.addOptionsTo(nearCliArgs) // add any other --options found the command line

      spawnNearCli(nearCliArgs)
  }

  price_token_to_near_out_help =`
   Calculates amount of tokens user will need to swap if he wants to receive
   'tokens_out' of 'tokens'
  
  usage:
  > swap price_token_to_near_out { token: AccountId, ynear_out: U128 }`;

  price_token_to_near_out (a /*: CommandLineArgs */) {
      // consume contract name from options if present
      const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName

      // --these are some examples on how to consume arguments
      // const argument = a.consumeString("api argument")
      // const argumentJson = a.consumeJSON("JSON argument")

      // get fn arguments as JSON
      const params = a.consumeJSON("{ token: AccountId, ynear_out: U128 }")

      a.noMoreArgs() // end of arguments

      const nearCliArgs = [
          "view",
          contract,
          "price_token_to_near_out",
          JSON.stringify(params)
      ]

      a.addOptionsTo(nearCliArgs) // add any other --options found the command line

      spawnNearCli(nearCliArgs)
  }

  price_token_to_token_in_help =`
   Calculates amount of tokens 'to' user will receive when swapping 'tokens_in' of 'from'
  
  usage:
  > swap price_token_to_token_in { from: AccountId, to: AccountId, tokens_in: U128 }`;

  price_token_to_token_in (a /*: CommandLineArgs */) {
      // consume contract name from options if present
      const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName

      // --these are some examples on how to consume arguments
      // const argument = a.consumeString("api argument")
      // const argumentJson = a.consumeJSON("JSON argument")

      // get fn arguments as JSON
      const params = a.consumeJSON("{ from: AccountId, to: AccountId, tokens_in: U128 }")

      a.noMoreArgs() // end of arguments

      const nearCliArgs = [
          "view",
          contract,
          "price_token_to_token_in",
          JSON.stringify(params)
      ]

      a.addOptionsTo(nearCliArgs) // add any other --options found the command line

      spawnNearCli(nearCliArgs)
  }

  price_token_to_token_out_help =`
   Calculates amount of tokens 'from' user will need to swap if he wants to receive
   'tokens_out' of tokens 'to'
  
  usage:
  > swap price_token_to_token_out { from: AccountId, to: AccountId, tokens_out: U128 }`;

  price_token_to_token_out (a /*: CommandLineArgs */) {
      // consume contract name from options if present
      const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName

      // --these are some examples on how to consume arguments
      // const argument = a.consumeString("api argument")
      // const argumentJson = a.consumeJSON("JSON argument")

      // get fn arguments as JSON
      const params = a.consumeJSON("{ from: AccountId, to: AccountId, tokens_out: U128 }")

      a.noMoreArgs() // end of arguments

      const nearCliArgs = [
          "view",
          contract,
          "price_token_to_token_out",
          JSON.stringify(params)
      ]

      a.addOptionsTo(nearCliArgs) // add any other --options found the command line

      spawnNearCli(nearCliArgs)
  }

  add_liquidity_transfer_callback_help =`
  
  usage:
  > swap add_liquidity_transfer_callback { token: AccountId }`;

  add_liquidity_transfer_callback (a /*: CommandLineArgs */) {
      // consume contract name from options if present
      const contract = a.consumeOption(commonCliOptions.contractName) || defaultContractName

      // --these are some examples on how to consume arguments
      // const argument = a.consumeString("api argument")
      // const argumentJson = a.consumeJSON("JSON argument")

      // get fn arguments as JSON
      const params = a.consumeJSON("{ token: AccountId }")

      a.noMoreArgs() // end of arguments

      const nearCliArgs = [
          "call",
          contract,
          "add_liquidity_transfer_callback",
          JSON.stringify(params)
      ]

      a.addOptionsTo(nearCliArgs) // add any other --options found the command line

      spawnNearCli(nearCliArgs)
  }
}
